{"cmd": "\"\"\"°°°\n# Gli oggetti in python\n°°°\"\"\"\n# |%%--%%| <RxNxXBFiJg|H1G0eYgmow>\n\"\"\"°°°\nTutto è un oggetto in python. Questi oggetti hanno sempre 3 elementi:\n* identità\n* tipologia\n* valore\n°°°\"\"\"\n# |%%--%%| <H1G0eYgmow|Ilj1nCuFTo>\n\"\"\"°°°\n## Identità\nInformazione numerica di tipo immutabile, rimane fino alla morte dell'oggetto.\n°°°\"\"\"\n# |%%--%%| <Ilj1nCuFTo|TbdsDwU3SN>\n\"\"\"°°°\n## Tipologia\nCategoria che determina la natura di un oggetto; quali valori possono essere assegnati ad un oggetto, altre caratteristiche dell'oggetto. Gli oggetti che fanno parte di un certo tipo si chiamano ISTANZE di quell'oggetto.\n°°°\"\"\"\n# |%%--%%| <TbdsDwU3SN|82U5DgluOw>\n\"\"\"°°°\n# Valore\nIl valore è un dato o un insieme di dati mantenuto all'interno dell'oggetto, quando questi lo prevede. Un oggetto che può modificare il suo valore durante il suo ciclo di vita si dice Mutabile, diversamente si definisce Immutabile. Tale caratteristica è data dal $\\color{green}{tipo}$ di oggetto.\n°°°\"\"\"\n# |%%--%%| <82U5DgluOw|L8Hwfv3vuI>\n\"\"\"°°°\n## Literal\nForma $\\color{red}{letterale}$ di un oggetto: python possiede una serie di dati che sono predefiniti nel linguaggio e la cui definizione del valore dipende dal modo letterale con cui sono stati inseriti. Se scrivo 20 python lo interpreterà come un integer perchè questo è il modo letterale con cui lo abbiamo inserito; tra apici invece definiremo un oggetto stringa, senza bisogno di dichiararlo!\n°°°\"\"\"\n# |%%--%%| <L8Hwfv3vuI|AK0oQRjf9m>\n\"\"\"°°°\n# Variabili\nPer riferirci agli oggetti non useremo mai la sua identità, ma lo assegneremo un $\\color{red}{nome}$ ad un oggetto.\n°°°\"\"\"\n# |%%--%%| <AK0oQRjf9m|8I59qcVdzR>\n\"\"\"°°°\n~~~\na = 20\nmia_lista = [1, 2, 3]\n°°°\"\"\"\n# |%%--%%| <8I59qcVdzR|V7tm5sZDgo>\n\"\"\"°°°\nEsistono delle regole per definire i nomi validi:\n* lettere o numeri o caratteri Unicode o underscore\n* NON può iniziare con un numero\n* NON può essere una **parola riservata**\n°°°\"\"\"\n# |%%--%%| <V7tm5sZDgo|UIZKuaJMbZ>\n\"\"\"°°°\nI nomi associati agli oggetti vengono definiti *variabili*.\nIn python una variabile non è una variabile, ma un nome che punta ad una variabile. Non è fortemente tipizzata.\n°°°\"\"\"\n# |%%--%%| <UIZKuaJMbZ|cpgB2k8CS4>\n\"\"\"°°°\n~~~\na = 20\na = \"andrea\"\n°°°\"\"\"\n# |%%--%%| <cpgB2k8CS4|xGxmF8Lkeh>\n\"\"\"°°°\nQuesta cosa implica la **condivisione** dell'ID.\n°°°\"\"\"\n# |%%--%%| <xGxmF8Lkeh|fWYw0WHCzP>\n\"\"\"°°°\n~~~\na = 20\nb = a\n~~~\nIn questo caso a e b puntano allo stesso oggetto, ma non sono lo stesso oggetto!\n°°°\"\"\"\n# |%%--%%| <fWYw0WHCzP|fmsBSQzCeA>\n\"\"\"°°°\nMolto importante è il concetto di $\\color{red}{reference~count}$.\nTutti gli oggetti in python hanno un contatore di riferimenti: questo implica che l'oggetto venga distrutto SOLO quando il suo reference count è pari a 0. Il *Garbage Collector* ripulisce tutto e libera la memoria (tutto in runtime).\n°°°\"\"\"\n# |%%--%%| <fmsBSQzCeA|sDSflsmkHx>\n\"\"\"°°°\n Il *Garbage Collector* ripulisce tutto e libera la memoria (tutto in runtime).\n°°°\"\"\"\n# |%%--%%| <sDSflsmkHx|vUhjuDJPE4>\n\"\"\"°°°\n# Callable Objects\nGli oggetti chiamabili sono quelli in cui usiamo argomenti all'interno delle parentesi tonde. Esempio le funzioni!\n°°°\"\"\"\n# |%%--%%| <vUhjuDJPE4|BX6DhqEkmn>\n\"\"\"°°°\nLa funzione `print` ne è un esempio!\n°°°\"\"\"\n# |%%--%%| <BX6DhqEkmn|q7M9oweVqQ>\n\"\"\"°°°\nAltre funzioni utili sono `id(oggetto)` oppure `type(oggetto)`.\n°°°\"\"\"\n# |%%--%%| <q7M9oweVqQ|FEmYTRhfZl>\n\"\"\"°°°\n# Gli Attributi\nGli oggetti in python hanno un valore ed una identità; possono avere anche una serie di *attributi*.\n°°°\"\"\"\n# |%%--%%| <FEmYTRhfZl|kLTKQJzto9>\n\"\"\"°°°\nGli attributi sono degli oggetti riferiti da un oggetto perchè ne specificano ulteriori caratteristiche (possono essere dati o funzioni). Nel caso in cui siano funzioni vengono chiamati metodi.\n°°°\"\"\"\n# |%%--%%| <kLTKQJzto9|cjf1Hxgy4S>\n\"\"\"°°°\nPer richiamarli si una il punto: nome oggetto.nome attributo!\n°°°\"\"\"\n# |%%--%%| <cjf1Hxgy4S|WbmxqYhTex>\n\"\"\"°°°\nQuando l'attributo è una funzione dobbiamo invocarlo essendo un oggetto Callable.\n°°°\"\"\"\n# |%%--%%| <WbmxqYhTex|UayvdYXfyf>\n\n\"python\".upper()\n\n# |%%--%%| <UayvdYXfyf|uW84WdSJtI>\n\nx = \"python\"\nx.upper()\n\n# |%%--%%| <uW84WdSJtI|nsvnXHaXx0>\n\"\"\"°°°\n# BASIC data types\n°°°\"\"\"\n# |%%--%%| <nsvnXHaXx0|eYXoQRyClB>\n\"\"\"°°°\n* tipi numerici (anche boolean)\n* stringhe\n* operatori\n*espressioni\n°°°\"\"\"\n# |%%--%%| <eYXoQRyClB|eeJHHaaLVw>\n\"\"\"°°°\n>> None è un basic data type che ha una sola istanza... None\n°°°\"\"\"\n# |%%--%%| <eeJHHaaLVw|EUy9CakW5V>\n\"\"\"°°°\n## tipi numerici\n* integer\n* floating poin\n* boolean\nSono tutti Immutabili!\n°°°\"\"\"\n# |%%--%%| <EUy9CakW5V|znFfoUZQgT>\n\"\"\"°°°\n`a = 3` ed `a = 4`\n°°°\"\"\"\n# |%%--%%| <znFfoUZQgT|lSMEFh7Scr>\n\"\"\"°°°\na non ha modificato l'oggetto, ma punta ad un oggetto diverso, prima il numero 3 e poi il numero 4!\n°°°\"\"\"\n# |%%--%%| <lSMEFh7Scr|rVj483QpDi>\n\"\"\"°°°\nDalla versione 3.6 possiamo dividere le cifre di un numero attraverso l'underscore: 10_000_000.\n°°°\"\"\"\n# |%%--%%| <rVj483QpDi|Hm0nZDIHtN>\n\"\"\"°°°\nPossiamo usare 3 literal per esprimere un numero:\n* Binario -- 0b10011001\n* ottale 0o1635\n* esadecimale 0x1F8A\n°°°\"\"\"\n# |%%--%%| <Hm0nZDIHtN|qbG62SubLm>\n\"\"\"°°°\nI boolean sono sottoinsiemi di interi che hanno solo 2 valori: True o False; True=1 e False=0.\n°°°\"\"\"\n# |%%--%%| <qbG62SubLm|YgJiB6uFF7>\n\"\"\"°°°\nI Floating point vengono introdotti con un punto decimale di separazione. \n°°°\"\"\"\n# |%%--%%| <YgJiB6uFF7|dwWoShkYZK>\n\"\"\"°°°\nPossiamo usare anche l'annotazione esponenziale!\n°°°\"\"\"\n# |%%--%%| <dwWoShkYZK|QP24AIt6bF>\n\n2e4\n\n# |%%--%%| <QP24AIt6bF|z1MqBwqeQ1>\n\n2e-4\n\n# |%%--%%| <z1MqBwqeQ1|q4LOQsxgps>\n\"\"\"°°°\nNaturalmente python supporta anche i numeri **immaginari**.\n°°°\"\"\"\n# |%%--%%| <q4LOQsxgps|zg4IAmdJXp>\n\"\"\"°°°\n## Stringhe\n°°°\"\"\"\n# |%%--%%| <zg4IAmdJXp|dCweC8jwMr>\n\"\"\"°°°\nLe STRINGHE sono sequenze di elementi: una sequenza indica un insieme *ordinato* di elementi. Tale caratteristica ci permetterà di intervenire facilmente sugli elementi che compongono la stringa.\n°°°\"\"\"\n# |%%--%%| <dCweC8jwMr|C9NoPjG1IC>\n\"\"\"°°°\nOgno elemento di una stringa deve appartenere al set UNICODE.\n°°°\"\"\"\n# |%%--%%| <C9NoPjG1IC|hmvisbzL7U>\n\"\"\"°°°\nLe stringhe in python sono oggetti immutabili, possiamo copiare parte di una stringa in un'altra stringa.\n°°°\"\"\"\n# |%%--%%| <hmvisbzL7U|uT2pkMyMPs>\n\"\"\"°°°\nPossiamo usare apici singoli o doppi, purchè siano simmetricamente definiti.\n°°°\"\"\"\n# |%%--%%| <uT2pkMyMPs|srIFrgmU2w>\n\"\"\"°°°\nUna stringa vuota non ha caratteri ma è comunque esistente come oggetto.\n°°°\"\"\"\n# |%%--%%| <srIFrgmU2w|YSYGi8sVaa>\n\"\"\"°°°\nPossiamo definire stringhe su multilinea usando 3 apici singoli o 3 apici doppi. \n°°°\"\"\"\n# |%%--%%| <YSYGi8sVaa|vRXZUL4x9Z>\n\"\"\"°°°\n>\n\"\"\" questa può essere una stringa su \ndiverse linee\"\"\"\n\n°°°\"\"\"\n# |%%--%%| <vRXZUL4x9Z|Czze82V0nl>\n\n#Abbiamo diverse tipologie di Escape (caratteri non stampabili):\n#* \\n andare a capo\n#* \\t tabulare\n#* \\\\ inseriamo la backslash nella stringa\n#* \\' inseriamo l'apice nella stringa\n#* \\\" inseriamo un doppio apice nella stringa\n\n# |%%--%%| <Czze82V0nl|SDL0vZ4Z3v>\n\"\"\"°°°\n## caso particolare: le F strings\n°°°\"\"\"\n# |%%--%%| <SDL0vZ4Z3v|HlJd1JAGn3>\n\"\"\"°°°\n* modulo formatting (ormai deprecata)\n* metodo format associato alle stringhe\n* f-string introdotto da python 3\n°°°\"\"\"\n# |%%--%%| <HlJd1JAGn3|DH2YrOKi2S>\n\ntitolo = \"Isola Misteriosa\"\nautore = \"Giulio Verne\"\n\n# |%%--%%| <DH2YrOKi2S|aUsyzLSTo3>\n\nprint(f\"Titolo: {titolo}, Autore: {autore}\")\n\n\n# |%%--%%| <aUsyzLSTo3|lSkwQRmOMF>\n\"\"\"°°°\nQuesta operazione viene detta **String Interpolation**\n°°°\"\"\"\n# |%%--%%| <lSkwQRmOMF|AvYXmf6kcA>\n\nprint(f\"Titolo: {titolo.upper()}, Autore: {autore}\")\n\n# |%%--%%| <AvYXmf6kcA|3Jx8Yhsckj>\n\"\"\"°°°\nPEP 498 -- Literal String Interpolation\n°°°\"\"\"\n# |%%--%%| <3Jx8Yhsckj|1zvE0D7vyF>\n\"\"\"°°°\n# Espressioni ed Operatori\n°°°\"\"\"\n# |%%--%%| <1zvE0D7vyF|IsvCB2887k>\n\"\"\"°°°\nLe operazioni eseguono operazioni su degli elementi; tali elementi possono essere di tipo diverso.\n°°°\"\"\"\n# |%%--%%| <IsvCB2887k|RDvSJilRZx>\n\"\"\"°°°\nI più comuni sono gli operatori aritmetici:\n* addizione + \n* sottrazione -\n* moltiplicazione \\*\n* divisione floating point /\n* divisione intera // solo parte intera del risultato\n* modulo % definisce il resto di una divisione\n* esponenziale **\n* meno unario -\n°°°\"\"\"\n# |%%--%%| <RDvSJilRZx|3EUGqSylam>\n\"\"\"°°°\noperatori di assegnamento:\n* = assegnazione di variabile\n* += scorciatoia per a += equivale ad a= a+b\n* -=, *=, /=, //=, %=, **=\n\n°°°\"\"\"\n# |%%--%%| <3EUGqSylam|1BjjNALW6j>\n\"\"\"°°°\noperatori di confronto (ritornano sempre un valore Booleano):\n* <\n* \\>\n* ==\n* !=\n* <=\n* \\>=\n°°°\"\"\"\n# |%%--%%| <1BjjNALW6j|TAplUJrwvD>\n\"\"\"°°°\nAttenzione alla $\\color{red}{precedenza}$: usiamo le parentesi per modificarne il comportamento.\n°°°\"\"\"\n# |%%--%%| <TAplUJrwvD|mnWjEwTD0v>\n\"\"\"°°°\nOperatori logici (restituisco valori Booleani):\n* and\n* or\n* notm\n°°°\"\"\"\n# |%%--%%| <mnWjEwTD0v|8683uFYApV>\n\"\"\"°°°\n|  A    | B    | A AND B|\n|:--------|:----:|-------:|\n|True| True| True|\n|False| False|False|\n|True| False|False|\n|False| False|False|\n°°°\"\"\"\n# |%%--%%| <8683uFYApV|48tVe28ePv>\n\"\"\"°°°\n|  A    | B    | A OR B|\n|:--------|:----:|-------:|\n|True| True| True|\n|False| False|False|\n|True| False|True|\n|False| False|True|\n°°°\"\"\"\n# |%%--%%| <48tVe28ePv|ikyXn2E8XJ>\n\"\"\"°°°\nNOT è un operatore UNARIO: ritorna il contrario dell'espressione valutata.\n°°°\"\"\"\n# |%%--%%| <ikyXn2E8XJ|qV4i5xfHOc>\n\"\"\"°°°\nIn python *tutti* gli oggetti hanno un valore di verità implicitamente assegnato:\nsono tutti FALSE\n* None\n* False\n* Zero\n* una sequenza vuota\n* un dizionario vuoto\nin tutti gli altri casi il valore è TRUE...\n°°°\"\"\"\n# |%%--%%| <qV4i5xfHOc|Ca1pw2xrrk>\n\"\"\"°°°\nOperatori su *Sequenze*\n°°°\"\"\"\n# |%%--%%| <Ca1pw2xrrk|uT72fq0LQM>\n\ns = \"python programming\"\n\n# |%%--%%| <uT72fq0LQM|aTiDPN9jGv>\n\ns[0]\n\n# |%%--%%| <aTiDPN9jGv|Iaw7cfeFcN>\n\ns[0:6]\n\n# |%%--%%| <Iaw7cfeFcN|PrLbA9GlOb>\n\ns[-1]\n\n# |%%--%%| <PrLbA9GlOb|ib5CBV7q9S>\n\ns[-2:]\n\n# |%%--%%| <ib5CBV7q9S|djAndsyADC>\n\ns[:6]\n\n# |%%--%%| <djAndsyADC|792ekjSHW8>\n\ns[0:6:3]\n\n# |%%--%%| <792ekjSHW8|SgiXWfqjks>\n\"\"\"°°°\n~~~\n[start:stop:step]\n°°°\"\"\"\n# |%%--%%| <SgiXWfqjks|1KuZMsVayK>\n\"\"\"°°°\nConcatenazione utilizzando l'operatore $\\huge{+}$\n°°°\"\"\"\n# |%%--%%| <1KuZMsVayK|MF5Im3N0Tx>\n\ns = \"python\"\n\n# |%%--%%| <MF5Im3N0Tx|yGAtN9Tr6o>\n\nlen(s)\n\n# |%%--%%| <yGAtN9Tr6o|PSZgJ9LE0o>\n\nmin(s)\n\n# |%%--%%| <PSZgJ9LE0o|43f8B6gMDq>\n\nmax(s)\n\n# |%%--%%| <43f8B6gMDq|X59r76wm0u>\n\n\n\n# |%%--%%| <X59r76wm0u|Hi8IX6QUgN>\n\"\"\"°°°\n# Conversioni di tipo\n°°°\"\"\"\n# |%%--%%| <Hi8IX6QUgN|Xswdz9x8YP>\n\"\"\"°°°\nInteri:\n* usiamo la funzione int()\n* le stringhe diventano numeri interi (se sono numeri)\n°°°\"\"\"\n# |%%--%%| <Xswdz9x8YP|JYQGatvoLl>\n\"\"\"°°°\nFloat:\n* usiamo la funzione float()\n* stesso discorso per gli interi\n°°°\"\"\"\n# |%%--%%| <JYQGatvoLl|1R6XfHWE7K>\n\"\"\"°°°\nStringa:\n* usiamo la funzione str()\n* usata per i numeri che diventano elementi di stringa\n°°°\"\"\"\n# |%%--%%| <1R6XfHWE7K|SZcMK3LudI>\n\"\"\"°°°\nBooleano:\n* usiamo la funzione bool()\n* lo applichiamo a tutti gli elementi\n°°°\"\"\"\n# |%%--%%| <SZcMK3LudI|lsnv5TL1il>\n\"\"\"°°°\n# Strutture di dati in python\n°°°\"\"\"\n# |%%--%%| <lsnv5TL1il|wduPyZ3R2y>\n\"\"\"°°°\n# Liste, Tuple, Dizionari, Set\n°°°\"\"\"\n# |%%--%%| <wduPyZ3R2y|ItZS1cp3er>\n\"\"\"°°°\nUna sequenza è generalmente definita come un insieme ordinato di elementi indicizzati numericamente attraverso la loro posizione; l'indice parte sempre da $\\huge{0}$\n°°°\"\"\"\n# |%%--%%| <ItZS1cp3er|wEOoGSAFbH>\n\"\"\"°°°\nListe e Tuple caratteristiche:\n* elementi di tipo qualunche\n* le liste sono mutabili\n* le tuple sono immutabili\n°°°\"\"\"\n# |%%--%%| <wEOoGSAFbH|mufKNttTuv>\n\"\"\"°°°\n## Liste\n°°°\"\"\"\n# |%%--%%| <mufKNttTuv|HfWgWzjB6i>\n\"\"\"°°°\nSequenza di elementi qualunque, mutabili. L'instaza riguarda una classe predefinita che si chiama list.\n°°°\"\"\"\n# |%%--%%| <HfWgWzjB6i|2OiPAsJSN9>\n\nmyList1 = []\nmyList = [10, 20, 30]\nlista_vuota = list()\n\n# |%%--%%| <2OiPAsJSN9|RCWRQxcCLo>\n\nmyList[-1]\n\n# |%%--%%| <RCWRQxcCLo|0cHwjdwsj4>\n\"\"\"°°°\nValgono per lo slicing tutti i discorsi visti per le stringhe!\n°°°\"\"\"\n# |%%--%%| <0cHwjdwsj4|Pjl3hHvsPV>\n\nnido = [1, 2, [\"primo\", \"secondo\", \"terzo\"]]\n\n# |%%--%%| <Pjl3hHvsPV|3baJGGuJ6L>\n\nnido[2][1]\n\n# |%%--%%| <3baJGGuJ6L|PrmRe11Ifq>\n\"\"\"°°°\nmodifichiamo la lista:\n°°°\"\"\"\n# |%%--%%| <PrmRe11Ifq|PUs2IxobyF>\n\nnido[0] = \"andrea\"\nnido[2][2] = \"paese\"\n\n# |%%--%%| <PUs2IxobyF|hrEvcWnAij>\n\nnido\n\n# |%%--%%| <hrEvcWnAij|AlZQnTkxdr>\n\nlen(nido)\n\n# |%%--%%| <AlZQnTkxdr|lG0yZlI8Wl>\n\nnido.insert(1, \"inserito\")\n\n# |%%--%%| <lG0yZlI8Wl|HKPYBGqcUA>\n\nnido\n\n# |%%--%%| <HKPYBGqcUA|ltk7HwWTCc>\n\nnido.insert(-1, \"ultimo\")\n\n# |%%--%%| <ltk7HwWTCc|rOmYKN1PTf>\n\nnido\n\n# |%%--%%| <rOmYKN1PTf|UKjUO4d1no>\n\nnido[-1].append(\"ancora ultimo\")\n\n# |%%--%%| <UKjUO4d1no|CVBEFGyegY>\n\nnido\n\n# |%%--%%| <CVBEFGyegY|NxdPKLJoH7>\n\ndel nido[0]\n\n# |%%--%%| <NxdPKLJoH7|uDrkBJJKYn>\n\nnido\n\n# |%%--%%| <uDrkBJJKYn|N5ZzOAnma2>\n\n\"ultimo\" in nido\n\n# |%%--%%| <N5ZzOAnma2|5kCYVFMGvV>\n\n\"paese\" in nido[-1]\n\n# |%%--%%| <5kCYVFMGvV|OAUr7fKddb>\n\n\"paese\" in nido\n\n# |%%--%%| <OAUr7fKddb|wcErPhhXkP>\n\"\"\"°°°\n## Due nomi, una lista\n°°°\"\"\"\n# |%%--%%| <wcErPhhXkP|OlsYx1wA1E>\n\nlista1 = [1, 2, 3]\nlista2 = lista1\nlista2[1] = 60\n\n\n# |%%--%%| <OlsYx1wA1E|ZuNDslF4xm>\n\nlista1\n\n# |%%--%%| <ZuNDslF4xm|8nF7fBU0xP>\n\nlista2\n\n# |%%--%%| <8nF7fBU0xP|7wq7oHZkEL>\n\"\"\"°°°\nPuntando alla stessa lista la variazione di una determina la variazione dell'altra... se questo non fosse il comportamento che vogliamo ritorna utile l'attributo COPY...\n°°°\"\"\"\n# |%%--%%| <7wq7oHZkEL|W5UrItl3a8>\n\nlista1 = [1, 2, 3]\nlista2 = lista1.copy()\n\n# |%%--%%| <W5UrItl3a8|AEHImLf8iL>\n\nlista2[0] = 60\n\n# |%%--%%| <AEHImLf8iL|yYuL87jAGF>\n\nlista1\n\n# |%%--%%| <yYuL87jAGF|AisOKZ7xqf>\n\nlista2\n\n# |%%--%%| <AisOKZ7xqf|mbcl1dky3V>\n\"\"\"°°°\n## Tuple\n°°°\"\"\"\n# |%%--%%| <mbcl1dky3V|9TZrphVRLw>\n\"\"\"°°°\nLa tupla è una sequenza $\\huge{immutabile}$\n°°°\"\"\"\n# |%%--%%| <9TZrphVRLw|IryEMbCxBW>\n\"\"\"°°°\nIl tipo è la classe tuple()\n°°°\"\"\"\n# |%%--%%| <IryEMbCxBW|2yI46WpeV5>\n\nmedaglie = ()\nmedaglie = tuple()\nelenco = \"oro\", \"argento\", \"bronzo\"\n\n# |%%--%%| <2yI46WpeV5|nKhkNRRYmF>\n\nprint(type(elenco))\n\n# |%%--%%| <nKhkNRRYmF|s7POldBaRR>\n\nprint(elenco)\n\n# |%%--%%| <s7POldBaRR|bgqpA4QugN>\n\"\"\"°°°\nil Tuple $\\huge{UNpacking}$\n°°°\"\"\"\n# |%%--%%| <bgqpA4QugN|D1H2PGAfwF>\n\nprimo, secondo, terzo = elenco\n\n# |%%--%%| <D1H2PGAfwF|Q1Z2YIeubs>\n\nprimo\n\n# |%%--%%| <Q1Z2YIeubs|AFDF1JBzin>\n\nsecondo\n\n# |%%--%%| <AFDF1JBzin|fIVMxpjwE2>\n\nterzo\n\n# |%%--%%| <fIVMxpjwE2|pnDsXoe8BI>\n\"\"\"°°°\n## Dizionario\n°°°\"\"\"\n# |%%--%%| <pnDsXoe8BI|rj6Sctvrqf>\n\"\"\"°°°\nNei dizionari l'ordine degli elementi non è definito, si usano delle chiavi univoche che vengono associate ai rispettivi valori.\n°°°\"\"\"\n# |%%--%%| <rj6Sctvrqf|keG4Jfoe26>\n\"\"\"°°°\nLe chiavi devono essere univoche. Gli elementi dei dizionari sono mutabili attraverso i metodi appartenenti ai dizionari.\n°°°\"\"\"\n# |%%--%%| <keG4Jfoe26|bdmMj0THDZ>\n\"\"\"°°°\nLa classe dei dizionari è la dict().\n°°°\"\"\"\n# |%%--%%| <bdmMj0THDZ|KDQI6U90XA>\n\nmioDizionario = {}\nmioDizionario = dict()\n\n# |%%--%%| <KDQI6U90XA|mYkAs94Fxy>\n\nmyDict = {\n    \"primo\": 10,\n    \"secondo\": 20,\n    \"terzo\": 30\n}\n\n# |%%--%%| <mYkAs94Fxy|Hkko60BZPa>\n\nmyDict[\"quarto\"] = 40\n\n# |%%--%%| <Hkko60BZPa|nZX3lcn69w>\n\nmyDict\n\n# |%%--%%| <nZX3lcn69w|qJw1fjwJM8>\n\ndel myDict[\"secondo\"]\n\n# |%%--%%| <qJw1fjwJM8|tJlRvoMGJw>\n\nmyDict\n\n\n# |%%--%%| <tJlRvoMGJw|qLl6Vnui4A>\n\"\"\"°°°\n~~~\nmyDict.clear() # vuota il dizionario\n°°°\"\"\"\n# |%%--%%| <qLl6Vnui4A|x4sHxrJvd6>\n\n\"terzo\" in myDict\n\n# |%%--%%| <x4sHxrJvd6|ZLEKCiUjBi>\n\nmyDict2 = myDict.copy()\n\n# |%%--%%| <ZLEKCiUjBi|2tBENw8vin>\n\nmyDict2\n\n# |%%--%%| <2tBENw8vin|7lPT1fESeX>\n\nmyDict2[\"quinto\"] = 50\n\n# |%%--%%| <7lPT1fESeX|E2oMmdOSJL>\n\nmyDict2\n\n# |%%--%%| <E2oMmdOSJL|fgUDFyu6Nf>\n\nmyDict\n\n# |%%--%%| <fgUDFyu6Nf|gXAffC8Zep>\n\nd1 = {10: \"a\"}\nd2 = {20: \"b\"}\n\n# |%%--%%| <gXAffC8Zep|KVwDO4iLcv>\n\nd3 = {}\n\n# |%%--%%| <KVwDO4iLcv|IZyN2piyzP>\n\nd3.update(d1)\n\n# |%%--%%| <IZyN2piyzP|kfpY3loFo2>\n\nd3\n\n# |%%--%%| <kfpY3loFo2|17Ixad3uPc>\n\nd3.update(d2)\n\n# |%%--%%| <17Ixad3uPc|H84gdWVw3q>\n\nd3\n\n# |%%--%%| <H84gdWVw3q|j1cSWkkQxy>\n\"\"\"°°°\n## SET\n°°°\"\"\"\n# |%%--%%| <j1cSWkkQxy|AOgOQ51N08>\n\"\"\"°°°\nSi tratta di insiemi, con tutte le operazioni matematiche che abbiamo per gli insiemi...\n°°°\"\"\"\n# |%%--%%| <AOgOQ51N08|lfA7zb2Uwv>\n\nmySet = set()\n\n# |%%--%%| <lfA7zb2Uwv|siAh3EdO8b>\n\nmySet1 = {1, 2, 3, 4}\n\n# |%%--%%| <siAh3EdO8b|u2WH3r0DUL>\n\"\"\"°°°\nUn set è un oggetto **mutabile**:\n°°°\"\"\"\n# |%%--%%| <u2WH3r0DUL|TU7JKoEkJ1>\n\nmySet1.add(19)\nprint(mySet1)\n\n\n# |%%--%%| <TU7JKoEkJ1|GU03ygHkDb>\n\"\"\"°°°\nEsiste anche la possibilità di usare dei Frozen SET...immutabili\n°°°\"\"\"\n# |%%--%%| <GU03ygHkDb|mzmqNEQ0tc>\n\ngelo = frozenset([12, 23, 43])\n\n# |%%--%%| <mzmqNEQ0tc|hZmZX6hC3O>\n\n23 in gelo\n\n# |%%--%%| <hZmZX6hC3O|pnNuYFIlDW>\n\n2 in mySet1\n\n# |%%--%%| <pnNuYFIlDW|SnLqpdwbHs>\n\"\"\"°°°\nOperazioni peculiari sugli insiemi: intersezione ed unione.\n°°°\"\"\"\n# |%%--%%| <SnLqpdwbHs|DAfq6NfAuS>\n\nset1 = {10,20,30,40}\nset2 = {30,40,50,60}\n\n# |%%--%%| <DAfq6NfAuS|zeL3dxVYb6>\n\nset1 & set2 # intersezione\n\n# |%%--%%| <zeL3dxVYb6|qOie5LJONt>\n\nset1.union(set2) # unione\n\n# |%%--%%| <qOie5LJONt|RMsXKKswxd>\n\nset1 | set2 # somma logica (unione)\n\n# |%%--%%| <RMsXKKswxd|VPTU7X1Qfo>\n\nset1 - set2 # differenza logica\n\n# |%%--%%| <VPTU7X1Qfo|gcIVZjHJ6i>\n\nset1 ^ set2 # or esclusivo: al primo o al secondo ma non entrambi\n\n# |%%--%%| <gcIVZjHJ6i|iV1fhPMD79>\n\"\"\"°°°\n# Strutture di codice\n°°°\"\"\"\n# |%%--%%| <iV1fhPMD79|aimK4pLUPt>\n\"\"\"°°°\n## linee di codice e blocchi di codice\n°°°\"\"\"\n# |%%--%%| <aimK4pLUPt|8nE91NUTZE>\n\"\"\"°°°\nAbbiamo:\n* linee logiche di codice (che vede python)\n* linee fisiche (che scriviamo nel listato)\n°°°\"\"\"\n# |%%--%%| <8nE91NUTZE|EQwR4QwJDd>\n\ns = \"python \\\nprogramming \\\nlanguage\"\nprint(s) # 4 linee fisiche ma una sola linea logica\n\n# |%%--%%| <EQwR4QwJDd|lehU0TXAus>\n\"\"\"°°°\nUn blocco di codice è un insieme di linee di codice raggruppate!\n°°°\"\"\"\n# |%%--%%| <lehU0TXAus|6RlUs1W6i9>\n\"\"\"°°°\n```\ninp = input(\"inserisci un numero: \")\nx = int(inp)\nif x < 10:\n    s = \"numero minore di 10\"\n    print(s)\n°°°\"\"\"\n# |%%--%%| <6RlUs1W6i9|VRhrBynozb>\n\"\"\"°°°\n## Statement: istruzioni del programma\n°°°\"\"\"\n# |%%--%%| <VRhrBynozb|dA0fNWIU5w>\n\"\"\"°°°\nOperazioni che si richiede al codice python di eseguire:\n\n```s = \"andrea\"```\n°°°\"\"\"\n# |%%--%%| <dA0fNWIU5w|m1ZI621TrP>\n\"\"\"°°°\nStatement semplici e composti\n°°°\"\"\"\n# |%%--%%| <m1ZI621TrP|9uj4MHZHPt>\n\"\"\"°°°\n```\nif x < 10:\n    s = \"numero minore di 10\"\n    elif x == 10:\n        s = \"numero 10\"\n    else:\n        s = \"numero maggiore di 10\n        print(s)\n°°°\"\"\"\n# |%%--%%| <9uj4MHZHPt|uI1o5Y8AEc>\n\"\"\"°°°\nStruttura di uno statement composto:\n* contiene una o più clausole\n* ogni clausola contiene una parola chiave di python detta HEADER e termina con il carattere :\n* suite che contiene un blocco di codice, indentato rispetto all'HEADER\n°°°\"\"\"\n# |%%--%%| <uI1o5Y8AEc|cKpBHKwLN9>\n\"\"\"°°°\n## Lo statement IF\nViene utilizzato per definire una esecuzione condizionata del codice (azioni differenti rispetto al test di verità). \n°°°\"\"\"\n# |%%--%%| <cKpBHKwLN9|aOVdMtKuln>\n\"\"\"°°°\nLa clausola ELSE viene eseguita solo se tutte le precedenti danno come risultato FALSE; possiamo ometterla per fare in modo che nel caso di tutti FALSE non venga eseguito nulla!\n°°°\"\"\"\n# |%%--%%| <aOVdMtKuln|3ph8Y0DLJH>\n\nx = 10\nif x > 11:\n    print(\"il numero è maggiore di 11\") # manca la clausola else\n\n# |%%--%%| <3ph8Y0DLJH|dljhV6bXVp>\n\"\"\"°°°\n## Lo statement WHILE\nLa else è facoltativa ma poco utilizzata\n°°°\"\"\"\n# |%%--%%| <dljhV6bXVp|UBmFIZoDEP>\n\"\"\"°°°\nSe è presente la clausola ELSE si entra nel ciclo sempre: se l'espressione risulterà FALSE ci entreremo direttamente senza passare dal True.\n°°°\"\"\"\n# |%%--%%| <UBmFIZoDEP|Vuyyo7KNr1>\n\"\"\"°°°\n```\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1\n°°°\"\"\"\n# |%%--%%| <Vuyyo7KNr1|tmHCbFw6rx>\n\"\"\"°°°\nSpesso si vuole eseguire un loop senza sapere quando la condizione sarà verificata; in questo caso utilizzeremo $\\color{green}{break}$ per uscire dal loop.\n°°°\"\"\"\n# |%%--%%| <tmHCbFw6rx|XwCfZT7Ivz>\n\"\"\"°°°\nDiverso è lo statement $\\color{red}{continue}$ il quale non esce dal ciclo ma lo fà ripartire dall'inizio!\n°°°\"\"\"\n# |%%--%%| <XwCfZT7Ivz|AljtPhxaxc>\n\nwhile True:\n    x = input(\"inserire una stringa \")\n    if x == \"stop\":\n        break\n    if x < \"b\":\n        continue\n    print(x) # tutte le stringhe < b non vengono stampate perchè si ritorna al primo if\n\n# |%%--%%| <AljtPhxaxc|KanNAdZEVr>\n\"\"\"°°°\n## Ciclo FOR\n°°°\"\"\"\n# |%%--%%| <KanNAdZEVr|xUyW9CsxLC>\n\"\"\"°°°\n```\nfor target in iterator:\n    suite\nelse:\n    suite\n°°°\"\"\"\n# |%%--%%| <xUyW9CsxLC|rtLP3s2ewL>\n\"\"\"°°°\nL'iterazione termina quando tutti gli elementi di iterator sono stati processati. La clausola else, poco utilizzata, solo se tutti gli elementi sono stati iterati.\n°°°\"\"\"\n# |%%--%%| <rtLP3s2ewL|3oliOshscB>\n\nmyList = [1, 3, 4, 5]\nfor i in myList:\n    if i <= 4:\n        print(i)\n    else:\n        break\nelse:\n    print(\"ho iterato tutti gli elementi\")\n\n# |%%--%%| <3oliOshscB|ibr5H54diH>\n\nfor i in myList:\n    if i <= 9:\n        print(i)\n    else:\n        break\nelse:\n    print(\"ho iterato tutti gli elementi\")\n\n# |%%--%%| <ibr5H54diH|6OE6fHXWpf>\n\"\"\"°°°\nL'iterazione sui dizionari assegna alla variabile TARGET le KEY.\n```\nfor i in myDict...\n°°°\"\"\"\n# |%%--%%| <6OE6fHXWpf|POaR7Ugqa4>\n\"\"\"°°°\n```\nfor i in myDict.items()\n```\nrestituisce delle tuple chiave valore.\n°°°\"\"\"\n# |%%--%%| <POaR7Ugqa4|lSFC1jICdY>\n\"\"\"°°°\nCONTINUE nel ciclo for avanza l'iterazione saltando l'elemento indicato:\n°°°\"\"\"\n# |%%--%%| <lSFC1jICdY|XeIHSLvLnp>\n\nfor i in [1, 3, 5, 7]:\n    if i == 5:\n        continue\n    print(i)\n\n# |%%--%%| <XeIHSLvLnp|yQF6STEnb7>\n\"\"\"°°°\n## La funzione RANGE\nrange(start, stop, step)... lo STOP è SEMPRE escluso!\n°°°\"\"\"\n# |%%--%%| <yQF6STEnb7|M9eRxsroEa>\n\"\"\"°°°\n## List comprehension\n°°°\"\"\"\n# |%%--%%| <M9eRxsroEa|MxcOvSDnrH>\n\"\"\"°°°\nSi tratta di un argomento avanzato ma molto importante perchè si tratta di uno strumento molto \npotente!\n°°°\"\"\"\n# |%%--%%| <MxcOvSDnrH|m6F0fLUrt0>\n\"\"\"°°°\n[expression for item in iterable if condition]\n°°°\"\"\"\n# |%%--%%| <m6F0fLUrt0|Evg23zKcaK>\n\nmiaLista = [1, 3, 5, 7, 8, 9, 12]\n\n# |%%--%%| <Evg23zKcaK|3oGukEcoAR>\n\nl =[x for x in miaLista if x > 5]\nprint(l)\n\n# |%%--%%| <3oGukEcoAR|PIy5soUgaR>\n\ns = [x * 10 for x in miaLista]\nprint(s)\n\n# |%%--%%| <PIy5soUgaR|5vRAFCmSnt>\n\np = [x*x for x in miaLista if x % 2 == 0]\nprint(p)\n\n# |%%--%%| <5vRAFCmSnt|3Ql7wJbSCL>\n\"\"\"°°°\n## Dict comprehension\n°°°\"\"\"\n# |%%--%%| <3Ql7wJbSCL|0YbCoBVk8c>\n\nnomi = {10: \"andrea\", 20: \"mario\", 30: \"anna\", 40: \"giuseppe\"}\n\n# |%%--%%| <0YbCoBVk8c|HITzRpnVCZ>\n\nmioDizionario = {k:v for k,v in nomi.items() if k > 20}\nprint(mioDizionario)\n\n# |%%--%%| <HITzRpnVCZ|zD6VTnjGAT>\n\nnomiDict = {k:v for k,v in nomi.items() if k <= 20}\nprint(nomiDict)\n\n# |%%--%%| <zD6VTnjGAT|GfeXB3NyqT>\n\ncambiato= {(k+30):v for k,v in nomi.items()}\nprint(cambiato)\n\n# |%%--%%| <GfeXB3NyqT|R8Cykvy7C0>\n\"\"\"°°°\n# Set comprehension\nRicordiamo che il set non può contenere elementi DUPLICATI.\n°°°\"\"\"\n# |%%--%%| <R8Cykvy7C0|NtLUZTg0lX>\n\nlista = [ 1, 5, 7, 8, 9]\n\n# |%%--%%| <NtLUZTg0lX|TglZujPSPf>\n\nnuovo = {x for x in lista if x < 7}\nprint(nuovo)\n\n# |%%--%%| <TglZujPSPf|NbkQf2kGyg>\n\"\"\"°°°\n# le Funzioni\n°°°\"\"\"\n# |%%--%%| <NbkQf2kGyg|vCKA9bL4BX>\n\"\"\"°°°\nInsieme di istruzioni con un nome, eseguita a richiesta in altre parti del programma. Una\nfunzione è un OGGETTO, Callable Object (oggetti chiamabili).\n°°°\"\"\"\n# |%%--%%| <vCKA9bL4BX|nwmuZClvlR>\n\"\"\"°°°\nDue cose si possono fare con una funzione:\n* definirla\n* chiamarla\n°°°\"\"\"\n# |%%--%%| <nwmuZClvlR|Cls6DpEbl1>\n\"\"\"°°°\n## Definizione di una funzione\n°°°\"\"\"\n# |%%--%%| <Cls6DpEbl1|9HcYjyljya>\n\"\"\"°°°\n``` \ndef function_name(parameters):\n            statements\n°°°\"\"\"\n# |%%--%%| <9HcYjyljya|Iepma5wQ60>\n\"\"\"°°°\nQuando passiamo i valori ai parametri, questi si chiamano argomenti!\n°°°\"\"\"\n# |%%--%%| <Iepma5wQ60|iIbQei0YPQ>\n\"\"\"°°°\n## Parametri della funzione\n°°°\"\"\"\n# |%%--%%| <iIbQei0YPQ|rQIihDJ9hj>\n\ndef myFunc(a, b):\n    print(a, b)  # parametri posizionali, in chiamata sono necessari nell'ordine dato\n\n# |%%--%%| <rQIihDJ9hj|IuZrIgVvjg>\n\ndef myFunc(a, b):\n    print(a, b) # keyword possiamo passarli nell'ordine che vogliamo...\n\nmyFunc(b=10, a=30)\n\n# |%%--%%| <IuZrIgVvjg|5f8fK4N8Nd>\n\nmyFunc(10, b=50) # prima i posizionali poi le keyword\n\n# |%%--%%| <5f8fK4N8Nd|rzRFN8e8Ps>\n\ndef myFunc(a, b, c=4):\n    print(a, b)  #parametri opzionali possono mancare nella chiamata\n\n# |%%--%%| <rzRFN8e8Ps|Zigo55Kf0L>\n\ndef myFunc(*args):\n    print(args) # il nome è convenzionale, inserisce i valori in una tupla, variabile\n\n# |%%--%%| <Zigo55Kf0L|iB3BfXHmrP>\n\ndef myFunc(a, b, *args):\n    print(a, b, args) # i posizionali sempre prima\n\n# |%%--%%| <iB3BfXHmrP|jo9U7v1STv>\n\nmyFunc(1,5, 6,8,9)\n\n# |%%--%%| <jo9U7v1STv|gau6bNHhlD>\n\ndef myFunc(**kwargs):\n    print(kwargs)\n\n# |%%--%%| <gau6bNHhlD|YVSrhvX3s4>\n\nmyFunc(andrea=1, mario=2)\n\n# |%%--%%| <YVSrhvX3s4|8kRRFQnSTz>\n\"\"\"°°°\n## Lo statement $\\color{red}{RETURN}$\n°°°\"\"\"\n# |%%--%%| <8kRRFQnSTz|YXS2ccyg1t>\n\ndef sum(a, b):\n    return a + b  # return può non essere seguito da una espressione\n\n# |%%--%%| <YXS2ccyg1t|jlJvORxEEb>\n\"\"\"°°°\nSe non indichiamo nessuna espressione, il ritorno sarà None...\n°°°\"\"\"\n# |%%--%%| <jlJvORxEEb|NEY1fH3tVj>\n\ndef sum(a, b):\n    c = a + b # torna al chiamante il valore None...\n\n# |%%--%%| <NEY1fH3tVj|8fo2psaLm7>\n\n## Chiamare le funzioni\n\n# |%%--%%| <8fo2psaLm7|GDa8Wvqx1G>\n\"\"\"°°°\n```function_name(arguments)```\n°°°\"\"\"\n# |%%--%%| <GDa8Wvqx1G|6mRjxZBrua>\n\"\"\"°°°\nI valori vengono passati come riferimento!\n°°°\"\"\"\n# |%%--%%| <6mRjxZBrua|Vgcp5zA5k7>\n\ndef myFunc(x):\n    x = 10\n    print(x) \n\n# |%%--%%| <Vgcp5zA5k7|qPeeD9KYR9>\n\ny = 20\nmyFunc(y)\nprint(y) # l'oggetto originario è immutabile e non ha modificato il suo contenuto\n\n# |%%--%%| <qPeeD9KYR9|YvrNfQSA8G>\n\ndef myFunc(x):\n    x[\"func\"] = 10\n\n# |%%--%%| <YvrNfQSA8G|qrkUTXfutm>\n\nd = {\"a\": 5}\nmyFunc(d)\nprint(d) # d è un dizionario, mutabile, ergo è stato effettivamente mutato\n\n# |%%--%%| <qrkUTXfutm|t9oMWsUMUZ>\n\"\"\"°°°\n## Funzioni come OGGETTI\n°°°\"\"\"\n# |%%--%%| <t9oMWsUMUZ|96rsyHO50A>\n\ndef sum(x, y):\n    print(x + y)\n\n# |%%--%%| <96rsyHO50A|0a5ebLX61s>\n\nsum(10, 5) # invochiamo la funzione\n\n# |%%--%%| <0a5ebLX61s|yt38vHqi1Q>\n\nsum # chiamiamo l'oggetto funzione, istanza della classe function\n\n# |%%--%%| <yt38vHqi1Q|I5uiboHG97>\n\"\"\"°°°\n## Usare gli oggetti funzione\n°°°\"\"\"\n# |%%--%%| <I5uiboHG97|KSlgtX8Y7B>\n\ndef outer(x, y):\n    def sum(a, b):\n        return a + b\n    print(sum(x, y))       # funzione nidificata\n\n# |%%--%%| <KSlgtX8Y7B|sjfbYqg5I1>\n\nouter(10,5)\n\n# |%%--%%| <sjfbYqg5I1|q9gQgVYdxd>\n\nsum(19,1)\n\n# |%%--%%| <q9gQgVYdxd|A01f2KsmJL>\n\ndef outer():\n    def inner(a, b):\n        print(a + b)\n    return inner\n\n# |%%--%%| <A01f2KsmJL|CW3zgDFP77>\n\nouter()\n\n# |%%--%%| <CW3zgDFP77|xWnR0f6aqo>\n\nf = outer()\nf(10, 5)\n\n# |%%--%%| <xWnR0f6aqo|VTWGqYNgac>\n\ndef somma(a,b):\n    print(a+b)\n\ndef sottrai(a,b):\n    print(a-b)\n\ndef myFunc(f, x, y):\n    f(x,y)\n\n# |%%--%%| <VTWGqYNgac|n4BnphZAWy>\n\nmyFunc(somma, 10, 5) \nmyFunc(sottrai, 10, 5) # ho passato la funzione come argomento oggetto funzione\n\n# |%%--%%| <n4BnphZAWy|kHFFCJdqi6>\n\"\"\"°°°\n## Namespace e Scope\n°°°\"\"\"\n# |%%--%%| <kHFFCJdqi6|oa9E7hI9kv>\n\"\"\"°°°\nNamspace:\n\n1. mappatura di nomi ad oggetti\n2. namespace multipli, a Runtime \n3. organizzati in una gerarchia\n4. cicli di vita differenti\n°°°\"\"\"\n# |%%--%%| <oa9E7hI9kv|HEQ6jVa6rw>\n\"\"\"°°°\nScope:\n\narea di codice che determona il namespace da utilizzare per la risoluzione dei nomi.\n°°°\"\"\"\n# |%%--%%| <HEQ6jVa6rw|4AO4vY9B36>\n\"\"\"°°°\nNamespace: gerarchia LEGB:\n* local\n* enclosed\n* global\n* built-in\n°°°\"\"\"\n# |%%--%%| <4AO4vY9B36|qhKqelbtMQ>\n\"\"\"°°°\n## local scope\nlivello interno di una funzione, viene creato una volta chiamata la funzione, rimosso una volta ottenuto il ritorno della funzione stessa.\n°°°\"\"\"\n# |%%--%%| <qhKqelbtMQ|iCCtGCNMfg>\n\"\"\"°°°\nE' il primo punto dove python cerca di risolvere i nomi!\n°°°\"\"\"\n# |%%--%%| <iCCtGCNMfg|rRjfz8i6IS>\n\"\"\"°°°\n## enclosed\nnel caso di funzioni nidificate è il secondo punto in cui viene cercata la risoluzione de nomi.m\n°°°\"\"\"\n# |%%--%%| <rRjfz8i6IS|sxssGNUUAj>\n\"\"\"°°°\n```\ndef outer(x):\n    y = 20\n    def inner():\n        print(x+y)\n    \n°°°\"\"\"\n# |%%--%%| <sxssGNUUAj|w8dA670WDr>\n\"\"\"°°°\n## global namespace\nTutti i nomi definiti dal livello del sorgente quando i nomi sono indicati al di fuori di tutte le funzioni.\n°°°\"\"\"\n# |%%--%%| <w8dA670WDr|luTD6SxDi6>\n\"\"\"°°°\n```\nx = 20\ndef miaFunc(y):\n    print(x + y)\n°°°\"\"\"\n# |%%--%%| <luTD6SxDi6|0KRo6obF6j>\n\"\"\"°°°\n## Built-In namespace (predefinito)\nDefinto direttamente dall'ambiente di runtime di python, contiene, ad esempio, la risoluzione print, list, dict, tuple, ...\n°°°\"\"\"\n# |%%--%%| <0KRo6obF6j|EWHQegW8yv>\n\"\"\"°°°\n## Global e Nonlocal\n°°°\"\"\"\n# |%%--%%| <EWHQegW8yv|mor0cNZCCr>\n\"\"\"°°°\nServono ad alterare la gerarchia standard nella ricerca della risoluzione dei nomi da parte di python.\n°°°\"\"\"\n# |%%--%%| <mor0cNZCCr|aupgIvBDlO>\n\"\"\"°°°\nVariabile Hiding:\n\nse utilizziamo un nome di variabile già presente a livelli di scope più alti, questa avrà la precedenza sulle altre, in un certo senso nascondendole!\n°°°\"\"\"\n# |%%--%%| <aupgIvBDlO|miYxBko2MM>\n\"\"\"°°°\nPer alterare questo comportamento utilizziamo la parola $\\color{red}{global}$\n°°°\"\"\"\n# |%%--%%| <miYxBko2MM|iI8odaU5uh>\n\"\"\"°°°\n```\nx = 100\ndef myFunc():\n    global x\n    x = 20\n    print(x)\n°°°\"\"\"\n# |%%--%%| <iI8odaU5uh|eR53sEkDWa>\n\"\"\"°°°\nIn questo caso abbiamo alterato la variabile globale!\n°°°\"\"\"\n# |%%--%%| <eR53sEkDWa|VCqbqkJbjc>\n\"\"\"°°°\nNonlocal cerca la variabile nel namespace della funzione madre (in funzioni nidificate).m\n°°°\"\"\"\n# |%%--%%| <VCqbqkJbjc|XnQgLoc4WQ>\n\ndef outer():\n    y = 20\n    def inner():\n        nonlocal y\n        y = 50\n        print(\"variabile in inner %s\" %(y))\n    inner()\n    print(\"variabile in outer %s\" %(y))\n\n# |%%--%%| <XnQgLoc4WQ|tufAtIjNxU>\n\nouter()\n\n# |%%--%%| <tufAtIjNxU|B2gicRMeJg>\n\"\"\"°°°\n# Function Decorator (decoratori di funzione)\n°°°\"\"\"\n# |%%--%%| <B2gicRMeJg|WA5eBKdB9Q>\n\"\"\"°°°\nUn decoratore di una funzione è una funzione che prende in input una funzione, la decora con altri contenuti e restituisce il nuovo valore.\n°°°\"\"\"\n# |%%--%%| <WA5eBKdB9Q|1bxVqQqgSn>\n\"\"\"°°°\nUtilizzo: modificare il comportamento di una funzione senza alterarne il codice sorgente!\n°°°\"\"\"\n# |%%--%%| <1bxVqQqgSn|BwI5BBVU8B>\n\ndef myDecorator(f):\n    def decorator():\n        print(\"ho decorato\")\n        f()\n    return decorator\n\n# |%%--%%| <BwI5BBVU8B|8nZbPoXVGW>\n\ndef myFunc():\n    print(\"la funzione myFunc\")\n\n# |%%--%%| <8nZbPoXVGW|BPfSLlWAhp>\n\ndecorata = myDecorator(myFunc)\n\n# |%%--%%| <BPfSLlWAhp|oBdWhGVcYK>\n\ndecorata()\n\n# |%%--%%| <oBdWhGVcYK|9EexlbLJMG>\n\n## con il decoratore...\n\n# |%%--%%| <9EexlbLJMG|xVVXmw1ikr>\n\ndef myDecorator(f):\n    def decorator():\n        print(\"ho decorato con il decoratore\")\n        f()\n    return decorator\n\n# |%%--%%| <xVVXmw1ikr|TIgnD0goo9>\n\n@myDecorator\ndef myFunc():\n    print(\"la funzione myFunc\")\n\n# |%%--%%| <TIgnD0goo9|fBqBtseUn3>\n\nmyFunc()\n\n# |%%--%%| <fBqBtseUn3|SvD08xZnWQ>\n\ndef mioDecoratore(func_destinazione):\n    def wrapper(*args):\n        print(\"elementi prima della funzione\")\n        func_destinazione()\n        print(\"elementi dopo la funzione\")\n    return wrapper\n\n# |%%--%%| <SvD08xZnWQ|rg9BpyrWvk>\n\"\"\"°°°\n> Nel caso in cui volessimo eseguire una funzione decorate SENZA decoratore, dopo aver importato \n\n```\nfrom undecorated import undecorated (pip install)\n```\nuseremo la sintassi ```undecorated(funzione)(parametri)```\n°°°\"\"\"\n# |%%--%%| <rg9BpyrWvk|Y79odzoyRX>\n\"\"\"°°°\nQuindi se chiameremo la funzione decorata direttamente otterremo la decorazione come previsto, se useremo undecorated... otterremo la funzione NON decorata!\n°°°\"\"\"\n# |%%--%%| <Y79odzoyRX|qU0FKHvrHb>\n\"\"\"°°°\n# Lambda function\n°°°\"\"\"\n# |%%--%%| <qU0FKHvrHb|X4aRwhwUkc>\n\"\"\"°°°\nUn'espressione che genera un oggetto funzione!\n°°°\"\"\"\n# |%%--%%| <X4aRwhwUkc|vZOgMyWfXy>\n\"\"\"°°°\nLambda ritorna una funzione $\\color{green}{anonima}$\n°°°\"\"\"\n# |%%--%%| <vZOgMyWfXy|gx0YVzOVmf>\n\"\"\"°°°\n```lambda arg1, arg2, argN : expression (con gli argomenti)```\n°°°\"\"\"\n# |%%--%%| <gx0YVzOVmf|KBM5T82Iik>\n\nrisultato = lambda x,y : x * y\n\n\n# |%%--%%| <KBM5T82Iik|FTNuHvA1jU>\n\nprint(\"il valore richiesto è \", risultato(2,3))\n\n# |%%--%%| <FTNuHvA1jU|OIoTFznrjh>\n\"\"\"°°°\n# Object-Orientation\n°°°\"\"\"\n# |%%--%%| <OIoTFznrjh|AJwH9S1R00>\n\"\"\"°°°\n* definizione di classi\n* creazione istanze di classi\n* come strutturare le classi in gerarchie di generalizzazione\n\n°°°\"\"\"\n# |%%--%%| <AJwH9S1R00|lWKa3eXtvQ>\n\"\"\"°°°\n## Classi ed Istanze\n°°°\"\"\"\n# |%%--%%| <lWKa3eXtvQ|GbigGG09tL>\n\"\"\"°°°\nfunzioni --> metodi di classe\n°°°\"\"\"\n# |%%--%%| <GbigGG09tL|g7jB4OHy3Y>\n\"\"\"°°°\n## Lo Statement Class\nUn oggetto composto che serve a creare degli oggetti attraverso la sua istanziazione.\n°°°\"\"\"\n# |%%--%%| <g7jB4OHy3Y|iIBKG9Lgjr>\n\"\"\"°°°\n```\nclass Classname(base-classes): (base-classes sono le superclassi, le classi padre)\n    statements\n    \n°°°\"\"\"\n# |%%--%%| <iIBKG9Lgjr|4YlN5mq6Ze>\n\"\"\"°°°\nNello statement ci saranno metodi ed attributi della classe...\n°°°\"\"\"\n# |%%--%%| <4YlN5mq6Ze|UZpFcNf9Mo>\n\nclass MyClass: # la convenzione python prevede la lettera maiuscola per le classi\n    pass\n\n# |%%--%%| <UZpFcNf9Mo|Jx4CFmueiS>\n\"\"\"°°°\nNon abbiamo usato le parentesi tonde, indicando che la classe di orgine è la object, propria di python...\n°°°\"\"\"\n# |%%--%%| <Jx4CFmueiS|kYmWv0PoBg>\n\"\"\"°°°\nistanza di una classe:\n\n```\nmyObj = MyClass()\n```\n°°°\"\"\"\n# |%%--%%| <kYmWv0PoBg|wh7seYGeKE>\n\"\"\"°°°\n## Attributi di Classe\nGli attributi possono essere di classe o di istanza. \n* attributi di classe: condivisi da tutte le istanze della classe\n* attributi di istanza: propri di quella e solo quella istanza, non della classe\n°°°\"\"\"\n# |%%--%%| <wh7seYGeKE|DkWfq2Hcdi>\n\nclass MyClass:\n    myAttr = 10\n\n# |%%--%%| <DkWfq2Hcdi|HkRljWqvsL>\n\nm1 = MyClass()\nm2 = MyClass()\n\n# |%%--%%| <HkRljWqvsL|XPQnLmJLX1>\n\nm1.myAttr\n\n# |%%--%%| <XPQnLmJLX1|gEJPEGE2do>\n\nm2.myAttr = 40\nm2.myAttr\n\n# |%%--%%| <gEJPEGE2do|4uMTsHZu2R>\n\nm2.attributo = 555\n\n# |%%--%%| <4uMTsHZu2R|fCsaaMMsoD>\n\nprint(m2.myAttr)\nprint(m2.attributo) # non è presente nella classe, diventa un attributo di istanza!\n\n# |%%--%%| <fCsaaMMsoD|uQVQOJ7v93>\n\"\"\"°°°\n## Metodi di istanza\n°°°\"\"\"\n# |%%--%%| <uQVQOJ7v93|oFjqnZM4HJ>\n\nclass MyClass:\n    def myMethod(self):\n        print(id(self)) # metodo di classe e self che rappresenta l'istanza invocata dal                           metodo\n\n# |%%--%%| <oFjqnZM4HJ|fOJ5Qjihvj>\n\nm1= MyClass()\nm2 = MyClass()\n\n# |%%--%%| <fOJ5Qjihvj|IoT6PlN0HJ>\n\nm1.myMethod()\n\n# |%%--%%| <IoT6PlN0HJ|YgcamNqqX3>\n\nm2.myMethod()\n\n# |%%--%%| <YgcamNqqX3|aUtVecOnva>\n\nMyClass.myMethod(m1)\n\n# |%%--%%| <aUtVecOnva|iblcEmRr3C>\n\nMyClass.myMethod(m2)\n\n# |%%--%%| <iblcEmRr3C|L7CNodYpBz>\n\"\"\"°°°\n## Attributi di ISTANZA\n°°°\"\"\"\n# |%%--%%| <L7CNodYpBz|6SBjyhIGN1>\n\nclass MyClass:\n    def setMessage(self, message):\n        self.message = message\n    def printMessage(self):\n        print(self.message)\n\n# |%%--%%| <6SBjyhIGN1|5Qd2cJIojA>\n\"\"\"°°°\nIn questo codice c'è un problema: se chiamiamo in istanza direttamente il metodo printMessage, otterremo un errore in quanto non è stato settato il messaggio; per ovviare a questo problema dovremo definire dei metodi di inizializzazione.\n°°°\"\"\"\n# |%%--%%| <5Qd2cJIojA|2JsEb8qCy8>\n\"\"\"°°°\n## il costruttore __init__\nViene chiamato sempre ed automaticamente ogni volta che una istanza di classe viene attivata.\n°°°\"\"\"\n# |%%--%%| <2JsEb8qCy8|dXd1EwQoQJ>\n\nclass MyClass:\n    def __init__(self, message):\n        self.message = message\n    def printMessage(self):\n        print(self.message)\n\n# |%%--%%| <dXd1EwQoQJ|YfkdKbXQQa>\n\nm1 = MyClass()\n\n# |%%--%%| <YfkdKbXQQa|NnY78ow8G1>\n\nm1 = MyClass(\"ciao\")\n\n# |%%--%%| <NnY78ow8G1|EPKtLa27A0>\n\nm1.printMessage()\n\n# |%%--%%| <EPKtLa27A0|bjSJq9HhvF>\n\"\"\"°°°\n## Metodi di classe\nEseguiti non sulle istanze ma proprio sull'oggetto classe!\n°°°\"\"\"\n# |%%--%%| <bjSJq9HhvF|RzCjm5mb0p>\n\nclass MyClass:\n    counter = 0 #attributo della classe\n    def __init__(self):\n        MyClass.counter += 1\n    @classmethod\n    def istanze(cls): # cls indica l'oggetto classe\n        print(cls.counter)\n\n# |%%--%%| <RzCjm5mb0p|jFeOv9gic0>\n\nm1 = MyClass()\nm2 = MyClass()\nm3 = MyClass()\n\n# |%%--%%| <jFeOv9gic0|LQsAWBkTAZ>\n\nMyClass.istanze()\n\n# |%%--%%| <LQsAWBkTAZ|wTgUZ7SVIA>\n\n\n\n# |%%--%%| <wTgUZ7SVIA|OIBm7Gfpku>\n\"\"\"°°°\n## STATIC Methods\n°°°\"\"\"\n# |%%--%%| <OIBm7Gfpku|VwvznbzJhp>\n\nclass MyClass:\n    @staticmethod\n    def somma(a,b):\n        return(a + b)\n\n# |%%--%%| <VwvznbzJhp|oyNqYilYMN>\n\ns = MyClass.somma(10,5)\nprint(s)\n\n# |%%--%%| <oyNqYilYMN|dcUpnI3oJX>\n\"\"\"°°°\nNon si riferisce alle classi e nemmeno alle istanze!\n°°°\"\"\"\n# |%%--%%| <dcUpnI3oJX|C5y3fKM73m>\n\"\"\"°°°\n# Inheritance (ereditarietà)\n°°°\"\"\"\n# |%%--%%| <C5y3fKM73m|ygoeqEcINB>\n\nclass BClass: #superclasse\n    pass\n\nclass AClass(BClass):\n    pass\n\n# |%%--%%| <ygoeqEcINB|K0Y4Ph1x1X>\n\"\"\"°°°\nLa funzione isinstance\n```\nm1 = AClass()\nisinstance(m1, AClass) True\nisinstance(m1, BClass) True\n\n°°°\"\"\"\n# |%%--%%| <K0Y4Ph1x1X|RMtF3n6ZWh>\n\nm1 = AClass()\n\n# |%%--%%| <RMtF3n6ZWh|ejvsg3eyJf>\n\nisinstance(m1, BClass)\n\n# |%%--%%| <ejvsg3eyJf|HHZrfuFwWS>\n\"\"\"°°°\n## Override\nPossiamo ridefinire un attributo all'ìnterno di una sottoclasse\n°°°\"\"\"\n# |%%--%%| <HHZrfuFwWS|RrszwLFD0s>\n\nclass BClass:\n    def setMessage(self, message):\n        self.message = message\n    def printMessage(self):\n        print(self.message)\n\nclass AClass(BClass):\n    def printMessage(self):\n        print(\"AClass \" + self.message)\n\n# |%%--%%| <RrszwLFD0s|OUl2bz6ODe>\n\nm1 = AClass()\nm1.setMessage(\"andrea\")\nm1.printMessage()\n\n# |%%--%%| <OUl2bz6ODe|UzdtbeUJCj>\n\"\"\"°°°\nQuesto metodo non è un metodo corretto, vediamo la procedura corretta con il costruttore.\nInfatti quando invochiamo la sottoclasse, se questa ha un suo costruttore viene usato ma, nella sintassi utilizzata, non viene considerato il costruttore della superclasse, viene sovrascritto il costruttore!\n°°°\"\"\"\n# |%%--%%| <UzdtbeUJCj|isPAcaRMzg>\n\"\"\"°°°\n# la funzione SUPER\n°°°\"\"\"\n# |%%--%%| <isPAcaRMzg|W2JNbRp1b1>\n\nclass BClass:\n    def __init__(self, message):\n        self.message = message\n    def printMessage(self):\n        print(self.message)\n    def scatola(self):\n        scatola = \"BICHER\"\n        return scatola\n\nclass AClass(BClass):\n    def __init__(self, message, valore):\n        super().__init__(message)\n        self.valore = valore\n\n# |%%--%%| <W2JNbRp1b1|cchsrAT9nR>\n\nm1 = AClass(\"andrea\", 100)\n\n# |%%--%%| <cchsrAT9nR|KiUisYqAjX>\n\nm1.printMessage()\n\n# |%%--%%| <KiUisYqAjX|yi9kx9rX0Q>\n\nm1.valore\n\n# |%%--%%| <yi9kx9rX0Q|2WkulbqWYk>\n\"\"\"°°°\nnon si usa solo per invocare init della superclasse, ma per accedere a tutto il contenuto della stessa:\n°°°\"\"\"\n# |%%--%%| <2WkulbqWYk|MFEPO6agMl>\n\nclass CClass(BClass):\n    def __init__(self, name):\n        self.nome = name\n        super().scatola()\n    \n\n# |%%--%%| <MFEPO6agMl|40lbtsOVcq>\n\nm2 = CClass(\"valerio\")\n\n# |%%--%%| <40lbtsOVcq|IKuEriydTc>\n\nm2.scatola()\n\n# |%%--%%| <IKuEriydTc|rLtzw2BikY>\n\"\"\"°°°\n## Properties\nInformation HIDING\npossibilità di rendere privati degli attributi che rappresentano dei dati, nascosti all'esterno della classe. i Metodi setter e getter settano e leggono gli attributi privati.\n\n°°°\"\"\"\n# |%%--%%| <rLtzw2BikY|4zqlBSZOWd>\n\nclass MyClass:\n    def __init__(self, my_attr):\n        self.priv_attr = my_attr\n    def get_attr(self):\n        return self.priv_attr\n    def set_attr(self, attr):\n        self.priv_attr = attr\n    \n    attr = property(get_attr, set_attr) # costruiamo una proprietà che nasconde attr\n\n# |%%--%%| <4zqlBSZOWd|iWq5iILXUx>\n\nobj = MyClass(\"andrea\")\nobj.attr\n\n# |%%--%%| <iWq5iILXUx|CSMz6g60c8>\n\"\"\"°°°\nGli attributi che iniziano con doppio underscore non sono accessibli al di fuori della classe:\n°°°\"\"\"\n# |%%--%%| <CSMz6g60c8|r7WQITLjMt>\n\nclass MyClass:\n    def __init__(self, my_attr):\n        self.__priv_attr = my_attr\n    def get_attr(self):\n        return self.__priv_attr\n    def set_attr(self, attr):\n        self.__priv_attr = attr\n    \n    attr = property(get_attr, set_attr) # costruiamo una proprietà che nasconde attr\n\n# |%%--%%| <r7WQITLjMt|99g7IKRiSO>\n\nobj1 = MyClass(\"nascosto\")\nobj1.__private_attr\n\n# |%%--%%| <99g7IKRiSO|W6N2gBWzXA>\n\nobj1._MyClass__priv_attr # accesso diretto al nostro attributo name Mangling\n\n# |%%--%%| <W6N2gBWzXA|KCwrpULOYo>\n\"\"\"°°°\n## Property Decorators\n°°°\"\"\"\n# |%%--%%| <KCwrpULOYo|1nChZd8HNL>\n\"\"\"°°°\nLe proprietà forniscono un modo di personalizzare l’accesso agli attributi dell’istanza. Per crearli, si utilizza il decoratore @property messo prima del metodo. Il loro scopo è quello di definire attributi read-only (non possono essere modificati). \n°°°\"\"\"\n# |%%--%%| <1nChZd8HNL|Gb1tfxYfDT>\n\"\"\"°°°\n```\n@property (decoratore del metodo getter)\n@name.setter (decoratore del metodo setter)\n°°°\"\"\"\n# |%%--%%| <Gb1tfxYfDT|TqvsC2GcgO>\n\nclass MyClass():\n    def __init__(self, my_attr):\n        self.__priv_attr = my_attr\n\n    def metodoPrivato(self):\n        print(\"Ciao\") #questo metodo non può essere chiamato fuori dalla classe!\n\n    @property\n    def attr(self):\n        return self.__priv_attr\n\n    @attr.setter\n    def attr(self, my_attr):\n        self.__priv_attr = my_attr\n\n\n# |%%--%%| <TqvsC2GcgO|XjC2ayr68G>\n\nobj = MyClass(\"decorato\")\nobj.attr\n\n# |%%--%%| <XjC2ayr68G|geNRn2xXr7>\n\n\nobj.__metodoPrivato()\n\n# |%%--%%| <geNRn2xXr7|CRodbPnisM>\n\n\n\n# |%%--%%| <CRodbPnisM|MxObedK4UU>\n\"\"\"°°°\n# Exceptions\n°°°\"\"\"\n# |%%--%%| <MxObedK4UU|pY3RzRkV3t>\n\"\"\"°°°\nLe eccezioni sono degli oggetti che appartengono ad una gerarchia base di python, ma possiamo anche crearne di nuove secondo le nostre necessità!\n°°°\"\"\"\n# |%%--%%| <pY3RzRkV3t|fK8NlKaU3I>\n\ndef myFunc(a,b):\n    return a // b\n\n# |%%--%%| <fK8NlKaU3I|PGe11nKCEj>\n\nmyFunc(10,0)\n\n# |%%--%%| <PGe11nKCEj|aLys7FlA4a>\n\"\"\"°°°\nViene elevata un'eccezione di divisione per ZERO!\n°°°\"\"\"\n# |%%--%%| <aLys7FlA4a|yJI9o1gLhT>\n\"\"\"°°°\nNessuno ha detto ha python come gestire questa eccezione e quindi viene invocato il messaggio standard (si tratta di un oggetto). Il runtime prima verifica se noi abbiamo definito un modo per gestire questa eccezione, se non lo trova risale di uno stack alla volta fino ad arrivare alla interruzione del programma mostrando l'errore connesso a questa eccezione.\n°°°\"\"\"\n# |%%--%%| <yJI9o1gLhT|WETCZmtYyN>\n\"\"\"°°°\nTutte le eccezioni sono istanze di una particolare classe sempre tutte sottoclassi di BaseException!\n°°°\"\"\"\n# |%%--%%| <WETCZmtYyN|R9ujEbWlRV>\n\"\"\"°°°\nZeroDivisionError ==> ArithmeticError ==> Exception ==> BaseException ==> object\n°°°\"\"\"\n# |%%--%%| <R9ujEbWlRV|BjMlMLUGZx>\n\"\"\"°°°\n## lo Statement try/except (si tratta di uno statement composto)\n°°°\"\"\"\n# |%%--%%| <BjMlMLUGZx|mu9Qhgm9Ep>\n\"\"\"°°°\n```\ntry:\n\n    suite\n\nexcept:\n\n    suite\n\n°°°\"\"\"\n# |%%--%%| <mu9Qhgm9Ep|oJ8Axv2OIu>\n\ndef myFunc(a,b):\n    try:\n        a // b\n    except (ZeroDivisionError, ValueError):\n        print(\"non posso dividere per zero\")\n    except IndexError:\n        print(\"IndexError\")\n\n# |%%--%%| <oJ8Axv2OIu|Mf4qQKUe25>\n\nmyFunc(120,0)\n\n# |%%--%%| <Mf4qQKUe25|aRg1cJzG47>\n\ndef myFunc(a,b):\n    try:\n        return a // b\n    except ZeroDivisionError as e:\n        print(\"Errore della funzione\\n\",e.args)\n\n# |%%--%%| <aRg1cJzG47|RHLrC7PIfA>\n\nmyFunc(10,0)\n\n# |%%--%%| <RHLrC7PIfA|yQniynOcke>\n\"\"\"°°°\nLa clausolo FINALLY viene usata per eseguire sempre, a prescindere dall'errore, una serie di istruzioni.\n°°°\"\"\"\n# |%%--%%| <yQniynOcke|VtFoNuHynC>\n\ndef myFunc(a,b):\n    try:\n        a // b\n    except ZeroDivisionError:\n        print(\"Errore di divisione\")\n    finally:\n        print(\"abbiamo provato ad eseguire la tua funzione\")\n\n# |%%--%%| <VtFoNuHynC|e4198yJsdc>\n\nmyFunc(10,6)\n\n# |%%--%%| <e4198yJsdc|nDJeGrU8Pt>\n\nmyFunc(29,0)\n\n# |%%--%%| <nDJeGrU8Pt|h9M1IR6Los>\n\"\"\"°°°\nDopo tutte le clausole except possiamo eseguire una else (se tutto andrà bene verrà eseguita la clausola else). Potremmo usare anche una finally, ma in questo caso else deve essere posta PRIMA della finally.\n°°°\"\"\"\n# |%%--%%| <h9M1IR6Los|0F5lzAXsW3>\n\ndef myFunc(a,b):\n    try:\n        a // b\n        risultato = True\n    except ZeroDivisionError:\n        print(\"Errore di divisione\")\n        risultato = False\n    else:\n        print(\"tutto a posto, abbiamo eseguito la funzione\")\n        \n    finally:\n        if risultato == True:\n            print(\"siamo giunti alla fine eseguendo la tua funzione\")\n        else:\n            print(\"non abbiamo potuto finire\")\n        \n\n# |%%--%%| <0F5lzAXsW3|UFZcf85e9I>\n\nmyFunc(28,5)\n\n# |%%--%%| <UFZcf85e9I|ZHoCShEAUW>\n\nmyFunc(10,0)\n\n# |%%--%%| <ZHoCShEAUW|Na0hroXokq>\n\"\"\"°°°\n## Gli statement raise ed assert\n°°°\"\"\"\n# |%%--%%| <Na0hroXokq|hKqfHXfoDz>\n\"\"\"°°°\n>> raise si usa per sollevare esplicitamente una eccezione\n\nLa classe di eccezione dopo raise può essere omessa.\n°°°\"\"\"\n# |%%--%%| <hKqfHXfoDz|JbyPFVHNYL>\n\nfor i in range(10):\n    print(i)\n    raise IndentationError(\"Errore nel loop\")\n\n# |%%--%%| <JbyPFVHNYL|rnHLysoelv>\n\"\"\"°°°\nraise senza classe risolleva una except che precedentemente era stata intercettata.\n°°°\"\"\"\n# |%%--%%| <rnHLysoelv|AtW13U9ZzZ>\n\ndef myFunc(a,b):\n    try:\n        a // b\n    except ZeroDivisionError:\n        print(\"ERRORE\")\n        raise\n\n# |%%--%%| <AtW13U9ZzZ|2isFnVQkCs>\n\nmyFunc(129,0)\n\n# |%%--%%| <2isFnVQkCs|OgxYjxz2xO>\n\"\"\"°°°\n>> assert expression, argument\n°°°\"\"\"\n# |%%--%%| <OgxYjxz2xO|K5F5DJwxKR>\n\"\"\"°°°\nValutiamo una espressione e se falsa verrà elevata una eccezione con in aggiunta la stringa argument.\n°°°\"\"\"\n# |%%--%%| <K5F5DJwxKR|SamgVE82Yr>\n\nx = 5\nassert x == 0, \"valore errato\"\n\n# |%%--%%| <SamgVE82Yr|OjC7Wh61Kl>\n\nx = 10\ny = 20\ntry:\n    if x != y:\n        raise # invoco un errore forzando la except!\n    else:\n        print(\"sono uguali\")\n\nexcept:\n       print(\"si è verificato un errore\")\n\n\n# |%%--%%| <OjC7Wh61Kl|yJn7Fcxvcg>\n\"\"\"°°°\n# Ereditarietà multipla\n°°°\"\"\"\n# |%%--%%| <yJn7Fcxvcg|aJCNucohbJ>\n\nclass BClass:\n    def bFunc(self):\n        print(\"sono in bFunc\")\n\nclass CClass:\n    def CFunc(self):\n        print(\"sono in cFunc\")\n\n# |%%--%%| <aJCNucohbJ|8mI7BdRzqT>\n\nclass AClass(BClass, CClass):\n    pass\n\na = AClass()\n\n# |%%--%%| <8mI7BdRzqT|rbQ7nD8q65>\n\na.bFunc()\n\n# |%%--%%| <rbQ7nD8q65|YYXKVkHsjj>\n\na.CFunc()\n\n# |%%--%%| <YYXKVkHsjj|b8oaAEur1F>\n\"\"\"°°°\n```\nclass Persona:\n    def __init__(self, fname, lname):\n        self.nome = fname\n        self.cognome = lname\n\nclass Indirizzo:\n    def __init__(self, via, paese):\n        self.via = via\n        self.paese = paese\n\nclass Utente(Persona, Indirizzo):\n    def __init__(self, nome, cognome, via, paese):\n        Persona.__init__(self, nome, cognome)\n        Indirizzo.__init__(self, via, paese)\n\n    def scheda(self):\n        return f\"\"\"\n        nome: {self.nome}\n        cognome: {self.cognome}\n        via: {self.via}\n        paese: {self.paese}\"\"\"\n\n\nio = Utente(\"andrea\", \"prestini\", \"BICHER\", \"Esine\")\n\nprint(io.scheda())\n\n```\n°°°\"\"\"\n# |%%--%%| <b8oaAEur1F|HZxSRlL3Vt>\n\"\"\"°°°\nCosa accade se entrambe le classi hanno lo stesso attributo funzione?\n\n> $\\color{red}{MRO~Method~Resolution~Order}$\n°°°\"\"\"\n# |%%--%%| <HZxSRlL3Vt|fQetPmkPKt>\n\"\"\"°°°\nL'attributo viene cercato prima nella sottoclasse stessa, poi nella prima classe presente nella gerarchia, poi la seconda, etc. come presenti nella dichiarazione della sottoclasse.\n°°°\"\"\"\n# |%%--%%| <fQetPmkPKt|9J5Lv6euU7>\n\"\"\"°°°\nIn estrema ratio l'ultima classe in cui ricerca sarà Object!\n°°°\"\"\"\n# |%%--%%| <9J5Lv6euU7|aIgXE5P6s2>\n\"\"\"°°°\n# Le classi Object e Type\n°°°\"\"\"\n# |%%--%%| <aIgXE5P6s2|7hYaiwPkXa>\n\"\"\"°°°\nSono le classi a livello più alto della gerarchia. Classi BASE!\n°°°\"\"\"\n# |%%--%%| <7hYaiwPkXa|KSg4ZnrP9q>\n\nclass MyClass:\n    pass\n\n# |%%--%%| <KSg4ZnrP9q|Jpr5dlbYmk>\n\"\"\"°°°\nMyClass è un'istanza della classe Object!\n\nMyclass è un'istanza della classe Type\n°°°\"\"\"\n# |%%--%%| <Jpr5dlbYmk|jceUN4o5K3>\n\"\"\"°°°\nmyobj è un'instanza della classe object ma NON della classe type!\n°°°\"\"\"\n# |%%--%%| <jceUN4o5K3|1PgEcXCPrG>\n\nmyObj = MyClass()\n\n# |%%--%%| <1PgEcXCPrG|p5R06NybDF>\n\nisinstance(myObj, MyClass)\n\n# |%%--%%| <p5R06NybDF|v1kdxxzhig>\n\nisinstance(myObj, object)\n\n# |%%--%%| <v1kdxxzhig|cbdWqZgyF0>\n\nisinstance(MyClass, object)\n\n# |%%--%%| <cbdWqZgyF0|p0VlWLKsTi>\n\nisinstance(MyClass, type)\n\n# |%%--%%| <p0VlWLKsTi|kaOguXbvfW>\n\nisinstance(myObj, type)\n\n# |%%--%%| <kaOguXbvfW|ln2eRwoUAf>\n\nisinstance(object, object)\n\n# |%%--%%| <ln2eRwoUAf|Y1MT1IqhI5>\n\nisinstance(type, type)\n\n# |%%--%%| <Y1MT1IqhI5|QOm1tUh8it>\n\nisinstance(object, type)\n\n# |%%--%%| <QOm1tUh8it|FmUbIf0I1m>\n\nisinstance(type, object)\n\n# |%%--%%| <FmUbIf0I1m|MHLqSEPXdj>\n\"\"\"°°°\n# Il Costruttore \\__new\\__\n°°°\"\"\"\n# |%%--%%| <MHLqSEPXdj|TiMXu6Qcxp>\n\"\"\"°°°\nIl metodo \\__init\\__ inizializza un oggetto già creato in precedenza: il costruttore \"effettivo\" è \\__new\\__\n°°°\"\"\"\n# |%%--%%| <TiMXu6Qcxp|VkVy78YaAY>\n\"\"\"°°°\nIn sintesi:\n* init inizializza una istanza di una classe\n* new costruisce l'istanza della classe\n°°°\"\"\"\n# |%%--%%| <VkVy78YaAY|dJj90ZHNKi>\n\"\"\"°°°\nGerarchicamente Prima viene invocato il metodo new (in modo automatico) e solo successivamente viene chiamato il metodo init; questi riceve una istanza già pronta, creata appunto da new.\n°°°\"\"\"\n# |%%--%%| <dJj90ZHNKi|8UeeUfyrdc>\n\"\"\"°°°\n~~~\n__new__(cls [,...])\n~~~\n°°°\"\"\"\n# |%%--%%| <8UeeUfyrdc|Aw3id1Oc7P>\n\"\"\"°°°\nGli argomenti, opzionali, saranno passati al metodo init una volta che new avrà generato l'istanza richiesta.\n°°°\"\"\"\n# |%%--%%| <Aw3id1Oc7P|fEmdidwah0>\n\nclass MyClass():\n    def __new__(cls):\n        print(\"istanza creata\")\n    def __init__(self):\n        print(\"istanza inizializzata\")\n\n# |%%--%%| <fEmdidwah0|JDgG4w3CPQ>\n\nmc = MyClass() # non è stato chiamato il metodo init!\n\n# |%%--%%| <JDgG4w3CPQ|V4TI0L4yup>\n\nclass MyClass():\n    def __new__(cls):\n        istanza = super().__new__(cls)\n        print(\"istanza creata\")\n        return istanza\n    def __init__(self):\n        print(\"istanza inizializzata\")\n\n# |%%--%%| <V4TI0L4yup|mcvVAKu4jH>\n\nmc = MyClass()\n\n# |%%--%%| <mcvVAKu4jH|S5DHid4IkM>\n\"\"\"°°°\n# Iterabili ed Iteratori (oggetti)\n°°°\"\"\"\n# |%%--%%| <S5DHid4IkM|z6YME5ha4K>\n\"\"\"°°°\nUn Container è un oggetto particolare che ammette un test particolare, il testo di appartenenza; liste, dizionari, set, tuple, string permetto di verificare se un oggetto appartiene o non appartiene a questi contenitori.\n°°°\"\"\"\n# |%%--%%| <z6YME5ha4K|VVGAbWiMZC>\n\nstringa = [1,2,3,4,5]\n3 in stringa\n\n# |%%--%%| <VVGAbWiMZC|hBgYu6KcOe>\n\"\"\"°°°\nUn contenitore è un oggetto iterabile, MA un oggetto iterabile NON è sempre un contenitore (es. un file)\n°°°\"\"\"\n# |%%--%%| <hBgYu6KcOe|4wz0fT9785>\n\"\"\"°°°\n> Un oggetto è iterabile quando è in grado di restituire un oggetto (Iteratore) che consente di scorrere i singoli elementi dell'oggetto iterabile di partenza. Tutti gli oggetti iterabili hanno un metodo \\__iter()\\__\n°°°\"\"\"\n# |%%--%%| <4wz0fT9785|DKheOrmmJp>\n\"\"\"°°°\nUn Iteratore è un oggetto che produce il prossimo elemento di un iterabile, attraverso il metodo \\__next()\\__\n°°°\"\"\"\n# |%%--%%| <DKheOrmmJp|kqD75tmy9B>\n\"\"\"°°°\nRicordiamo che un oggetto può essere sia iterabile che iteratore nel caso in cui contenga entrambi i metodi, \\__iter()\\__ ed \\__next()\\__ (es. una lista)\n°°°\"\"\"\n# |%%--%%| <kqD75tmy9B|bFyP87naPC>\n\nmyList = [\"primo\", \"secondo\", \"terzo\"]\n\n# |%%--%%| <bFyP87naPC|HiiuFeOSKg>\n\nit1 = iter(myList)\n\n# |%%--%%| <HiiuFeOSKg|ry9yI2wZfn>\n\ntype(it1)\n\n# |%%--%%| <ry9yI2wZfn|eiZik5E1EV>\n\nnext(it1)\n\n# |%%--%%| <eiZik5E1EV|bEucTmwShI>\n\nnext(it1)\n\n# |%%--%%| <bEucTmwShI|ivl7IWR3Yh>\n\nnext(it1)\n\n# |%%--%%| <ivl7IWR3Yh|xXMZbzL5n9>\n\nnext(it1) # sono finiti gli elementi dell'oggetto iterabile\n\n# |%%--%%| <xXMZbzL5n9|cle20MUIJ6>\n\"\"\"°°°\n## Creazione di un iteratore\n°°°\"\"\"\n# |%%--%%| <cle20MUIJ6|O8bl3Wa0Vl>\n\nclass MyIterator:\n    def __iter__(self):\n        self.myattr = 2\n        return self\n\n    def __next__(self):\n        if self.myattr < 300:\n            n = self.myattr\n            self.myattr *= 2\n            return n\n        else:\n            raise StopIteration(\"fine iterazione\")\n\n# |%%--%%| <O8bl3Wa0Vl|naAdjEi7fU>\n\nmiaClasse = MyIterator()\nmioIter = iter(miaClasse)\n\n# |%%--%%| <naAdjEi7fU|Pi4BgEqwMf>\n\nprint(next(mioIter))\nprint(next(mioIter))\nprint(next(mioIter))\nprint(next(mioIter))\nprint(next(mioIter))\nprint(next(mioIter))\nprint(next(mioIter))\nprint(next(mioIter))\nprint(next(mioIter))\n\n# |%%--%%| <Pi4BgEqwMf|alCJ4Nljfc>\n\nfor i in mioIter:\n    print(i)\n\n# |%%--%%| <alCJ4Nljfc|DF0oIWa1wx>\n\"\"\"°°°\n## Funzione generatore (Generator Function)\n°°°\"\"\"\n# |%%--%%| <DF0oIWa1wx|oZeZSTt3Fr>\n\"\"\"°°°\nSe all'interno di una funzione compare la parola $\\color{green}{yield}$ tale funzione si ferma, cede il valore al chiamante della funzione e, se richiamata, cede il valore successivo...\n°°°\"\"\"\n# |%%--%%| <oZeZSTt3Fr|jt2Qnm86UO>\n\ndef get_doppio_gen():\n    e = 2\n    while (e < 100):\n        yield e\n        e *= 2\n\n# |%%--%%| <jt2Qnm86UO|Xbb6Qnk03M>\n\ngen = get_doppio_gen()\n\n# |%%--%%| <Xbb6Qnk03M|SPlvztm5Hv>\n\ntype(gen)\n\n# |%%--%%| <SPlvztm5Hv|SKCUZvyryv>\n\nprint(next(gen))\nprint(next(gen))\n\n# |%%--%%| <SKCUZvyryv|C9rAnPrRpy>\n\"\"\"°°°\n## Le Espressioni Generatore (Generator Expressions)\n°°°\"\"\"\n# |%%--%%| <C9rAnPrRpy|4KYPaAHm1t>\n\"\"\"°°°\nDi fatto è come le list comprehension:\n```\nnumeri = [1,2,3,4,5]\nn = [n * n for n in numeri if n % 2 == 1]\n```\n°°°\"\"\"\n# |%%--%%| <4KYPaAHm1t|GkNvSHMVPF>\n\"\"\"°°°\nAttenzione: il generatore una volta iterato esaurisce il suo compito e NON può essere nuovamente iterato, cosa che invece si può fare con le list comprehension!\n°°°\"\"\"\n# |%%--%%| <GkNvSHMVPF|XmHj4VMF90>\n\nelenco = [1,2,3,4,5]\nnelenco = (n * n for n in elenco if n % 2 == 1)\n\n# |%%--%%| <XmHj4VMF90|8KFtUzWf9j>\n\ntype(nelenco)\n\n# |%%--%%| <8KFtUzWf9j|gyczhCiXih>\n\nfor i in nelenco:\n    print(i)\n\n# |%%--%%| <gyczhCiXih|ycpHwip11I>\n\nfor i in nelenco:\n    print(i) # non otteniamo NULLA, il generatore è VUOTO!\n\n# |%%--%%| <ycpHwip11I|zvJTybPPkm>\n\"\"\"°°°\nPerchè usare le Generato Expression al posto delle list comprehension?\n°°°\"\"\"\n# |%%--%%| <zvJTybPPkm|FDv4w9MKxv>\n\"\"\"°°°\n> la LC produce una lista eseguita subito e tutta in una volta sola; le GE viene eseguita in modo Lazy, un elemento alla volta durante l'iterazione dei suoi elementi!\n°°°\"\"\"\n# |%%--%%| <FDv4w9MKxv|TE65K6st8m>\n\"\"\"°°°\nSe il numero di elementi fosse alto l'utilizzo di GE rispetto a LC allocherebbe moltissima memoria in più, e, in alcuni casi, risulterebbe più veloce ed a volte l'unico strumento utilizzabile.\n°°°\"\"\"\n# |%%--%%| <TE65K6st8m|e3HCr9WA7z>\n\"\"\"°°°\n# Aggiornamento python 3.7 \n°°°\"\"\"\n# |%%--%%| <e3HCr9WA7z|F8sEvXlgV6>\n\"\"\"°°°\n## Dizionario\n°°°\"\"\"\n# |%%--%%| <F8sEvXlgV6|uQq2GyF7Nm>\n\"\"\"°°°\nAdesso garantiscono l'ordinamento delle chiavi secondo l'inserimento effettuato!\n°°°\"\"\"\n# |%%--%%| <uQq2GyF7Nm|igdDUJwEXM>\n\nmyDizionario = {\n    \"primo\": 10,\n    \"secondo\": 20,\n    \"terzo\": 30,\n}\n\n# |%%--%%| <igdDUJwEXM|D0np8bYw7q>\n\nmyDizionario[\"quarto\"] = 40\n\n# |%%--%%| <D0np8bYw7q|o1g3HUFSgN>\n\nprint(dict.keys(myDizionario))\n\n# |%%--%%| <o1g3HUFSgN|Ob8RSlMagr>\n\"\"\"°°°\n## Type Annotations\n°°°\"\"\"\n# |%%--%%| <Ob8RSlMagr|QuPmGzWOB6>\n\"\"\"°°°\nPEP python Enhancement Proposal (proposte di miglioramento di python).\n°°°\"\"\"\n# |%%--%%| <QuPmGzWOB6|tqKCKqbbdo>\n\"\"\"°°°\nPEP 3107 Function Annotations\n°°°\"\"\"\n# |%%--%%| <tqKCKqbbdo|1ATQShRGG3>\n\"\"\"°°°\nIntroduce la possibilità di annotare i parametri ed i valori di ritorno di una funzione.\n°°°\"\"\"\n# |%%--%%| <1ATQShRGG3|0zm2qwMNyJ>\n\"\"\"°°°\n```\ndef foo(a: expression, b: expression = 5):\n```\n°°°\"\"\"\n# |%%--%%| <0zm2qwMNyJ|acNHGgsvga>\n\"\"\"°°°\n```\ndef myFunc(x: \"paramentro x\") -> \"ritorno\":\n    return x\n```\n°°°\"\"\"\n# |%%--%%| <acNHGgsvga|NbBYF5kmXn>\n\"\"\"°°°\nPEP 484 Type Hints\n°°°\"\"\"\n# |%%--%%| <NbBYF5kmXn|cgZ7mCnUKG>\n\ndef myFunc(x: int, s: str = \"python\") -> str:\n    print(x)\n    return s\n\n\n# |%%--%%| <cgZ7mCnUKG|2ppVnHYcRC>\n\nprint(myFunc.__annotations__)\n\n# |%%--%%| <2ppVnHYcRC|40bONgt3qN>\n\"\"\"°°°\nPEP 526 del 2016 Syntax for Variable Annotations\n°°°\"\"\"\n# |%%--%%| <40bONgt3qN|KWrMkrTg3K>\n\na: int = 10\nprint(__annotations__)\n\n# |%%--%%| <KWrMkrTg3K|T22gmtGt5G>\n\nclass MyClass:\n    nome: str\n    cognome: str\n\n    def __init__(self, nome, cognome):\n        self.nome = nome\n        self.cognome = cognome\n\n# |%%--%%| <T22gmtGt5G|k1CQXUGxPZ>\n\nprint(MyClass.__annotations__)\n\n# |%%--%%| <k1CQXUGxPZ|YhtxkLziJm>\n\"\"\"°°°\n## Le Data Classes\n°°°\"\"\"\n# |%%--%%| <YhtxkLziJm|toN60amy4N>\n\"\"\"°°°\nServono ad arricchire di significato le definizioni delle classi, soprattutto quando rappresentano dei DATI.\n°°°\"\"\"\n# |%%--%%| <toN60amy4N|f8M4SewpHf>\n\nfrom dataclasses import dataclass # importiamo il decoratore\n\n# |%%--%%| <f8M4SewpHf|322BvyM0WT>\n\n@dataclass(init=True, repr=True, order=True, frozen=False)\nclass MiaClasse:\n    nome: str\n    cognome: str\n\n\n# |%%--%%| <322BvyM0WT|yViNxDQVxy>\n\nmc = MiaClasse(\"andrea\", \"prestini\")\n\n# |%%--%%| <yViNxDQVxy|POuEnbsZy7>\n\nprint(mc)\n\n# |%%--%%| <POuEnbsZy7|wEYhM9f6ru>\n\"\"\"°°°\n## Assignment Expression (python versione 3.8) Walrus Operator\n°°°\"\"\"\n# |%%--%%| <wEYhM9f6ru|KWa07PAhJp>\n\"\"\"°°°\nSe avessimo un'espressione come questa:\n```\nif x = somma(5,3) > 6:\n    print(\"x maggiore di 6\")\n```\notteniamo un ERRORE!\n°°°\"\"\"\n# |%%--%%| <KWa07PAhJp|qKqZmIrz9W>\n\"\"\"°°°\nMA:\n```\nif x:= somma(5,3) > 6:\n    print(\"x maggiore di 6\")\n```\nFUNZIONA!\n°°°\"\"\"\n# |%%--%%| <qKqZmIrz9W|VZAZIFRStB>\n\"\"\"°°°\n```\nmylist = [1,2,3,4,5]\nwhile x := len(mylist) != 0:\n    print(x, mylist.pop())\n```\n°°°\"\"\"\n# |%%--%%| <VZAZIFRStB|cEh3nJ9gCJ>\n\"\"\"°°°\n## Paremetri Positional-Only PEP 570\n°°°\"\"\"\n# |%%--%%| <cEh3nJ9gCJ|RrN5GMKPyU>\n\"\"\"°°°\n```\ndef somma(a, /, b, c): # a solo argomenti posizionali, b e c anche keywords\n    return a + b + c\n°°°\"\"\"\n# |%%--%%| <RrN5GMKPyU|aptYmEuHaL>\n\"\"\"°°°\n# Applicazioni distribuite con RabbitMQ\n°°°\"\"\"\n# |%%--%%| <aptYmEuHaL|OmURjWVv7E>\n\"\"\"°°°\n## Architetture Client - Server\n°°°\"\"\"", "cmd_opts": " -s", "import_complete": 1, "terminal": "nvimterm"}