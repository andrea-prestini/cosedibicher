{"UayvdYXfyf": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 22, "data": {"text/plain": "'PYTHON'"}, "metadata": {}}], "uW84WdSJtI": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 23, "data": {"text/plain": "'PYTHON'"}, "metadata": {}}], "QP24AIt6bF": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 35, "data": {"text/plain": "20000.0"}, "metadata": {}}], "z1MqBwqeQ1": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 36, "data": {"text/plain": "0.0002"}, "metadata": {}}], "DH2YrOKi2S": [], "aUsyzLSTo3": [{"output_type": "stream", "name": "stdout", "text": "Titolo: Isola Misteriosa, Autore: Giulio Verne\n"}], "AvYXmf6kcA": [{"output_type": "stream", "name": "stdout", "text": "Titolo: ISOLA MISTERIOSA, Autore: Giulio Verne\n"}], "uT72fq0LQM": [], "aTiDPN9jGv": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 67, "data": {"text/plain": "'p'"}, "metadata": {}}], "Iaw7cfeFcN": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 68, "data": {"text/plain": "'python'"}, "metadata": {}}], "PrLbA9GlOb": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 69, "data": {"text/plain": "'g'"}, "metadata": {}}], "ib5CBV7q9S": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 70, "data": {"text/plain": "'ng'"}, "metadata": {}}], "djAndsyADC": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 71, "data": {"text/plain": "'python'"}, "metadata": {}}], "792ekjSHW8": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 72, "data": {"text/plain": "'ph'"}, "metadata": {}}], "MF5Im3N0Tx": [], "yGAtN9Tr6o": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 76, "data": {"text/plain": "6"}, "metadata": {}}], "PSZgJ9LE0o": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 77, "data": {"text/plain": "'h'"}, "metadata": {}}], "43f8B6gMDq": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 78, "data": {"text/plain": "'y'"}, "metadata": {}}], "2OiPAsJSN9": [], "RCWRQxcCLo": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 92, "data": {"text/plain": "30"}, "metadata": {}}], "Pjl3hHvsPV": [], "3baJGGuJ6L": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 95, "data": {"text/plain": "'secondo'"}, "metadata": {}}], "PUs2IxobyF": [], "hrEvcWnAij": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 98, "data": {"text/plain": "['andrea', 2, ['primo', 'secondo', 'paese']]"}, "metadata": {}}], "AlZQnTkxdr": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 99, "data": {"text/plain": "3"}, "metadata": {}}], "lG0yZlI8Wl": [], "HKPYBGqcUA": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 101, "data": {"text/plain": "['andrea', 'inserito', 2, ['primo', 'secondo', 'paese']]"}, "metadata": {}}], "ltk7HwWTCc": [], "rOmYKN1PTf": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 103, "data": {"text/plain": "['andrea', 'inserito', 2, 'ultimo', ['primo', 'secondo', 'paese']]"}, "metadata": {}}], "UKjUO4d1no": [], "CVBEFGyegY": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 105, "data": {"text/plain": "['andrea',\n 'inserito',\n 2,\n 'ultimo',\n ['primo', 'secondo', 'paese', 'ancora ultimo']]"}, "metadata": {}}], "NxdPKLJoH7": [], "uDrkBJJKYn": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 107, "data": {"text/plain": "['inserito', 2, 'ultimo', ['primo', 'secondo', 'paese', 'ancora ultimo']]"}, "metadata": {}}], "N5ZzOAnma2": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 108, "data": {"text/plain": "True"}, "metadata": {}}], "5kCYVFMGvV": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 109, "data": {"text/plain": "True"}, "metadata": {}}], "OAUr7fKddb": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 110, "data": {"text/plain": "False"}, "metadata": {}}], "OlsYx1wA1E": [], "ZuNDslF4xm": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 113, "data": {"text/plain": "[1, 60, 3]"}, "metadata": {}}], "8nF7fBU0xP": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 114, "data": {"text/plain": "[1, 60, 3]"}, "metadata": {}}], "W5UrItl3a8": [], "AEHImLf8iL": [], "yYuL87jAGF": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 118, "data": {"text/plain": "[1, 2, 3]"}, "metadata": {}}], "AisOKZ7xqf": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 119, "data": {"text/plain": "[60, 2, 3]"}, "metadata": {}}], "2yI46WpeV5": [], "nKhkNRRYmF": [{"output_type": "stream", "name": "stdout", "text": "<class 'tuple'>\n"}], "s7POldBaRR": [{"output_type": "stream", "name": "stdout", "text": "('oro', 'argento', 'bronzo')\n"}], "D1H2PGAfwF": [], "Q1Z2YIeubs": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 128, "data": {"text/plain": "'oro'"}, "metadata": {}}], "AFDF1JBzin": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 129, "data": {"text/plain": "'argento'"}, "metadata": {}}], "fIVMxpjwE2": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 130, "data": {"text/plain": "'bronzo'"}, "metadata": {}}], "KDQI6U90XA": [], "mYkAs94Fxy": [], "Hkko60BZPa": [], "nZX3lcn69w": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 138, "data": {"text/plain": "{'primo': 10, 'secondo': 20, 'terzo': 30, 'quarto': 40}"}, "metadata": {}}], "qJw1fjwJM8": [], "tJlRvoMGJw": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 140, "data": {"text/plain": "{'primo': 10, 'terzo': 30, 'quarto': 40}"}, "metadata": {}}], "x4sHxrJvd6": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 142, "data": {"text/plain": "True"}, "metadata": {}}], "ZLEKCiUjBi": [], "2tBENw8vin": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 144, "data": {"text/plain": "{'primo': 10, 'terzo': 30, 'quarto': 40}"}, "metadata": {}}], "7lPT1fESeX": [], "E2oMmdOSJL": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 146, "data": {"text/plain": "{'primo': 10, 'terzo': 30, 'quarto': 40, 'quinto': 50}"}, "metadata": {}}], "fgUDFyu6Nf": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 147, "data": {"text/plain": "{'primo': 10, 'terzo': 30, 'quarto': 40}"}, "metadata": {}}], "gXAffC8Zep": [], "KVwDO4iLcv": [], "IZyN2piyzP": [], "kfpY3loFo2": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 151, "data": {"text/plain": "{10: 'a'}"}, "metadata": {}}], "17Ixad3uPc": [], "H84gdWVw3q": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 153, "data": {"text/plain": "{10: 'a', 20: 'b'}"}, "metadata": {}}], "lfA7zb2Uwv": [], "siAh3EdO8b": [], "TU7JKoEkJ1": [{"output_type": "stream", "name": "stdout", "text": "{1, 2, 3, 4, 19}\n"}], "mzmqNEQ0tc": [], "hZmZX6hC3O": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 162, "data": {"text/plain": "True"}, "metadata": {}}], "pnNuYFIlDW": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 163, "data": {"text/plain": "True"}, "metadata": {}}], "DAfq6NfAuS": [], "zeL3dxVYb6": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 166, "data": {"text/plain": "{30, 40}"}, "metadata": {}}], "qOie5LJONt": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 167, "data": {"text/plain": "{10, 20, 30, 40, 50, 60}"}, "metadata": {}}], "RMsXKKswxd": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 168, "data": {"text/plain": "{10, 20, 30, 40, 50, 60}"}, "metadata": {}}], "VPTU7X1Qfo": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 169, "data": {"text/plain": "{10, 20}"}, "metadata": {}}], "gcIVZjHJ6i": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 170, "data": {"text/plain": "{10, 20, 50, 60}"}, "metadata": {}}], "EQwR4QwJDd": [{"output_type": "stream", "name": "stdout", "text": "python programming language\n"}], "3ph8Y0DLJH": [], "AljtPhxaxc": [{"name": "stdout", "output_type": "stream", "text": ["sas\n", "ere\n", "era\n"]}], "3oliOshscB": [{"name": "stdout", "output_type": "stream", "text": ["1\n", "3\n", "4\n"]}], "ibr5H54diH": [{"name": "stdout", "output_type": "stream", "text": ["1\n", "3\n", "4\n", "5\n", "ho iterato tutti gli elementi\n"]}], "XeIHSLvLnp": [{"name": "stdout", "output_type": "stream", "text": ["1\n", "3\n", "7\n"]}], "Evg23zKcaK": [], "3oGukEcoAR": [{"name": "stdout", "output_type": "stream", "text": ["[7, 8, 9, 12]\n"]}], "PIy5soUgaR": [{"name": "stdout", "output_type": "stream", "text": ["[10, 30, 50, 70, 80, 90, 120]\n"]}], "5vRAFCmSnt": [{"name": "stdout", "output_type": "stream", "text": ["[64, 144]\n"]}], "0YbCoBVk8c": [], "HITzRpnVCZ": [{"name": "stdout", "output_type": "stream", "text": ["{30: 'anna', 40: 'giuseppe'}\n"]}], "zD6VTnjGAT": [{"name": "stdout", "output_type": "stream", "text": ["{10: 'andrea', 20: 'mario'}\n"]}], "GfeXB3NyqT": [{"name": "stdout", "output_type": "stream", "text": ["{40: 'andrea', 50: 'mario', 60: 'anna', 70: 'giuseppe'}\n"]}], "NtLUZTg0lX": [], "TglZujPSPf": [{"name": "stdout", "output_type": "stream", "text": ["{1, 5}\n"]}], "rQIihDJ9hj": [], "IuZrIgVvjg": [{"name": "stdout", "output_type": "stream", "text": "30 10\n"}], "5f8fK4N8Nd": [{"name": "stdout", "output_type": "stream", "text": "10 50\n"}], "rzRFN8e8Ps": [], "Zigo55Kf0L": [], "iB3BfXHmrP": [], "jo9U7v1STv": [{"name": "stdout", "output_type": "stream", "text": "1 5 (6, 8, 9)\n"}], "gau6bNHhlD": [], "YVSrhvX3s4": [{"name": "stdout", "output_type": "stream", "text": "{'andrea': 1, 'mario': 2}\n"}], "YXS2ccyg1t": [], "NEY1fH3tVj": [], "Vgcp5zA5k7": [], "qPeeD9KYR9": [{"name": "stdout", "output_type": "stream", "text": "10\n20\n"}], "YvrNfQSA8G": [], "qrkUTXfutm": [{"name": "stdout", "output_type": "stream", "text": "{'a': 5, 'func': 10}\n"}], "96rsyHO50A": [], "0a5ebLX61s": [{"name": "stdout", "output_type": "stream", "text": "15\n"}], "yt38vHqi1Q": [{"data": {"text/plain": "<function __main__.sum(x, y)>"}, "execution_count": 31, "metadata": {}, "output_type": "execute_result"}], "KSlgtX8Y7B": [], "sjfbYqg5I1": [{"name": "stdout", "output_type": "stream", "text": "15\n"}], "q9gQgVYdxd": [{"name": "stdout", "output_type": "stream", "text": "20\n"}], "A01f2KsmJL": [], "CW3zgDFP77": [{"data": {"text/plain": "<function __main__.outer.<locals>.inner(a, b)>"}, "execution_count": 46, "metadata": {}, "output_type": "execute_result"}], "xWnR0f6aqo": [{"name": "stdout", "output_type": "stream", "text": "15\n"}], "VTWGqYNgac": [], "n4BnphZAWy": [{"name": "stdout", "output_type": "stream", "text": "15\n5\n"}], "XnQgLoc4WQ": [], "tufAtIjNxU": [{"name": "stdout", "output_type": "stream", "text": "variabile in inner 50\nvariabile in outer 50\n"}], "BwI5BBVU8B": [], "8nZbPoXVGW": [], "BPfSLlWAhp": [], "oBdWhGVcYK": [{"name": "stdout", "output_type": "stream", "text": "ho decorato\nla funzione myFunc\n"}], "9EexlbLJMG": [], "xVVXmw1ikr": [], "TIgnD0goo9": [], "fBqBtseUn3": [{"name": "stdout", "output_type": "stream", "text": "ho decorato con il decoratore\nla funzione myFunc\n"}], "SvD08xZnWQ": [], "KBM5T82Iik": [], "FTNuHvA1jU": [{"name": "stdout", "output_type": "stream", "text": "il valore richiesto \u00e8  6\n"}], "UZpFcNf9Mo": [], "DkWfq2Hcdi": [], "HkRljWqvsL": [], "XPQnLmJLX1": [{"data": {"text/plain": "10"}, "execution_count": 6, "metadata": {}, "output_type": "execute_result"}], "gEJPEGE2do": [{"data": {"text/plain": "40"}, "execution_count": 7, "metadata": {}, "output_type": "execute_result"}], "4uMTsHZu2R": [], "fCsaaMMsoD": [{"name": "stdout", "output_type": "stream", "text": "40\n555\n"}], "oFjqnZM4HJ": [], "fOJ5Qjihvj": [], "IoT6PlN0HJ": [{"name": "stdout", "output_type": "stream", "text": "140538000774736\n"}], "YgcamNqqX3": [{"name": "stdout", "output_type": "stream", "text": "140538000774544\n"}], "aUtVecOnva": [{"name": "stdout", "output_type": "stream", "text": "140538000774736\n"}], "iblcEmRr3C": [{"name": "stdout", "output_type": "stream", "text": "140538000774544\n"}], "6SBjyhIGN1": [], "dXd1EwQoQJ": [], "YfkdKbXQQa": [{"ename": "TypeError", "evalue": "__init__() missing 1 required positional argument: 'message'", "output_type": "error", "traceback": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)", "\u001b[0;32m<ipython-input-31-f7aebff7631d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMyClass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;31mTypeError\u001b[0m: __init__() missing 1 required positional argument: 'message'"]}], "NnY78ow8G1": [], "EPKtLa27A0": [{"name": "stdout", "output_type": "stream", "text": "ciao\n"}], "RzCjm5mb0p": [], "jFeOv9gic0": [], "LQsAWBkTAZ": [{"name": "stdout", "output_type": "stream", "text": "3\n"}], "VwvznbzJhp": [], "oyNqYilYMN": [{"name": "stdout", "output_type": "stream", "text": "15\n"}], "ygoeqEcINB": [], "RMtF3n6ZWh": [], "ejvsg3eyJf": [{"data": {"text/plain": "True"}, "execution_count": 4, "metadata": {}, "output_type": "execute_result"}], "RrszwLFD0s": [], "OUl2bz6ODe": [{"name": "stdout", "output_type": "stream", "text": "AClass andrea\n"}], "W2JNbRp1b1": [], "cchsrAT9nR": [], "KiUisYqAjX": [{"name": "stdout", "output_type": "stream", "text": "andrea\n"}], "yi9kx9rX0Q": [{"data": {"text/plain": "100"}, "execution_count": 6, "metadata": {}, "output_type": "execute_result"}], "MFEPO6agMl": [], "40lbtsOVcq": [], "IKuEriydTc": [{"data": {"text/plain": "'BICHER'"}, "execution_count": 13, "metadata": {}, "output_type": "execute_result"}], "4zqlBSZOWd": [], "iWq5iILXUx": [{"data": {"text/plain": "'andrea'"}, "execution_count": 21, "metadata": {}, "output_type": "execute_result"}], "r7WQITLjMt": [], "99g7IKRiSO": [{"ename": "AttributeError", "evalue": "'MyClass' object has no attribute '__private_attr'", "output_type": "error", "traceback": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)", "\u001b[0;32m<ipython-input-28-5efacf79dd33>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mobj1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMyClass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"nascosto\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mobj1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__private_attr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;31mAttributeError\u001b[0m: 'MyClass' object has no attribute '__private_attr'"]}], "W6N2gBWzXA": [{"data": {"text/plain": "'nascosto'"}, "execution_count": 29, "metadata": {}, "output_type": "execute_result"}], "TqvsC2GcgO": [], "XjC2ayr68G": [{"data": {"text/plain": "'decorato'"}, "execution_count": 55, "metadata": {}, "output_type": "execute_result"}], "geNRn2xXr7": [{"ename": "AttributeError", "evalue": "'MyClass' object has no attribute '__metodoPrivato'", "output_type": "error", "traceback": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)", "\u001b[0;32m<ipython-input-56-606cd4ed12cc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__metodoPrivato\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;31mAttributeError\u001b[0m: 'MyClass' object has no attribute '__metodoPrivato'"]}], "fK8NlKaU3I": [], "PGe11nKCEj": [{"ename": "ZeroDivisionError", "evalue": "integer division or modulo by zero", "output_type": "error", "traceback": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)", "\u001b[0;32m<ipython-input-17-c0381f4b20fc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmyFunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;32m<ipython-input-16-e07cba645158>\u001b[0m in \u001b[0;36mmyFunc\u001b[0;34m(a, b)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmyFunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m//\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;31mZeroDivisionError\u001b[0m: integer division or modulo by zero"]}], "oJ8Axv2OIu": [], "Mf4qQKUe25": [{"name": "stdout", "output_type": "stream", "text": "non posso dividere per zero\n"}], "aRg1cJzG47": [], "RHLrC7PIfA": [{"name": "stdout", "output_type": "stream", "text": "Errore della funzione\n ('integer division or modulo by zero',)\n"}], "VtFoNuHynC": [], "e4198yJsdc": [{"name": "stdout", "output_type": "stream", "text": "abbiamo provato ad eseguire la tua funzione\n"}], "nDJeGrU8Pt": [{"name": "stdout", "output_type": "stream", "text": "Errore di divisione\nabbiamo provato ad eseguire la tua funzione\n"}], "0F5lzAXsW3": [], "UFZcf85e9I": [{"name": "stdout", "output_type": "stream", "text": "tutto a posto, abbiamo eseguito la funzione\nsiamo giunti alla fine eseguendo la tua funzione\n"}], "ZHoCShEAUW": [{"name": "stdout", "output_type": "stream", "text": "Errore di divisione\nnon abbiamo potuto finire\n"}], "JbyPFVHNYL": [{"name": "stdout", "output_type": "stream", "text": "0\n"}, {"ename": "IndentationError", "evalue": "Errore nel loop (<string>)", "output_type": "error", "traceback": ["Traceback \u001b[0;36m(most recent call last)\u001b[0m:\n", "  File \u001b[1;32m\"/home/andrea/.local/lib/python3.7/site-packages/IPython/core/interactiveshell.py\"\u001b[0m, line \u001b[1;32m3319\u001b[0m, in \u001b[1;35mrun_code\u001b[0m\n    exec(code_obj, self.user_global_ns, self.user_ns)\n", "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-62-76e0d4921a86>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0;36m, in \u001b[0;35m<module>\u001b[0;36m\u001b[0m\n\u001b[0;31m    raise IndentationError(\"Errore nel loop\")\u001b[0m\n", "\u001b[0;36m  File \u001b[0;32m\"<string>\"\u001b[0;36m, line \u001b[0;32munknown\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m Errore nel loop\n"]}], "AtW13U9ZzZ": [], "2isFnVQkCs": [{"name": "stdout", "output_type": "stream", "text": "ERRORE\n"}, {"ename": "ZeroDivisionError", "evalue": "integer division or modulo by zero", "output_type": "error", "traceback": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)", "\u001b[0;32m<ipython-input-64-5540b34fef5d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmyFunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m129\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;32m<ipython-input-63-f194659d205d>\u001b[0m in \u001b[0;36mmyFunc\u001b[0;34m(a, b)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmyFunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m         \u001b[0ma\u001b[0m \u001b[0;34m//\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mZeroDivisionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ERRORE\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n", "\u001b[0;31mZeroDivisionError\u001b[0m: integer division or modulo by zero"]}], "SamgVE82Yr": [{"ename": "AssertionError", "evalue": "valore errato", "output_type": "error", "traceback": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)", "\u001b[0;32m<ipython-input-67-53d27c38eaec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"valore errato\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;31mAssertionError\u001b[0m: valore errato"]}], "OjC7Wh61Kl": [{"name": "stdout", "output_type": "stream", "text": "si \u00e8 verificato un errore\n"}], "aJCNucohbJ": [], "8mI7BdRzqT": [], "rbQ7nD8q65": [{"name": "stdout", "output_type": "stream", "text": "sono in bFunc\n"}], "YYXKVkHsjj": [{"name": "stdout", "output_type": "stream", "text": "sono in cFunc\n"}], "KSg4ZnrP9q": [], "1PgEcXCPrG": [], "p5R06NybDF": [{"data": {"text/plain": "True"}, "execution_count": 13, "metadata": {}, "output_type": "execute_result"}], "v1kdxxzhig": [{"data": {"text/plain": "True"}, "execution_count": 14, "metadata": {}, "output_type": "execute_result"}], "cbdWqZgyF0": [{"data": {"text/plain": "True"}, "execution_count": 15, "metadata": {}, "output_type": "execute_result"}], "p0VlWLKsTi": [{"data": {"text/plain": "True"}, "execution_count": 16, "metadata": {}, "output_type": "execute_result"}], "kaOguXbvfW": [{"data": {"text/plain": "False"}, "execution_count": 17, "metadata": {}, "output_type": "execute_result"}], "ln2eRwoUAf": [{"data": {"text/plain": "True"}, "execution_count": 18, "metadata": {}, "output_type": "execute_result"}], "Y1MT1IqhI5": [{"data": {"text/plain": "True"}, "execution_count": 19, "metadata": {}, "output_type": "execute_result"}], "QOm1tUh8it": [{"data": {"text/plain": "True"}, "execution_count": 20, "metadata": {}, "output_type": "execute_result"}], "FmUbIf0I1m": [{"data": {"text/plain": "True"}, "execution_count": 21, "metadata": {}, "output_type": "execute_result"}], "fEmdidwah0": [], "JDgG4w3CPQ": [{"name": "stdout", "output_type": "stream", "text": "istanza creata\n"}], "V4TI0L4yup": [], "mcvVAKu4jH": [{"name": "stdout", "output_type": "stream", "text": "istanza creata\nistanza inizializzata\n"}], "VVGAbWiMZC": [{"data": {"text/plain": "True"}, "execution_count": 32, "metadata": {}, "output_type": "execute_result"}], "bFyP87naPC": [], "HiiuFeOSKg": [], "ry9yI2wZfn": [{"data": {"text/plain": "list_iterator"}, "execution_count": 37, "metadata": {}, "output_type": "execute_result"}], "eiZik5E1EV": [{"data": {"text/plain": "'primo'"}, "execution_count": 38, "metadata": {}, "output_type": "execute_result"}], "bEucTmwShI": [{"data": {"text/plain": "'secondo'"}, "execution_count": 39, "metadata": {}, "output_type": "execute_result"}], "ivl7IWR3Yh": [{"data": {"text/plain": "'terzo'"}, "execution_count": 40, "metadata": {}, "output_type": "execute_result"}], "xXMZbzL5n9": [{"ename": "StopIteration", "evalue": "", "output_type": "error", "traceback": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)", "\u001b[0;32m<ipython-input-41-2488cfd6da6f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;31mStopIteration\u001b[0m: "]}], "O8bl3Wa0Vl": [], "naAdjEi7fU": [], "Pi4BgEqwMf": [{"name": "stdout", "output_type": "stream", "text": "2\n4\n8\n16\n32\n64\n128\n256\n"}, {"ename": "StopIteration", "evalue": "fine iterazione", "output_type": "error", "traceback": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)", "\u001b[0;32m<ipython-input-77-6e2b15c412f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmioIter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmioIter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmioIter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;32m<ipython-input-75-32bedc233f39>\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"fine iterazione\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[0;31mStopIteration\u001b[0m: fine iterazione"]}], "alCJ4Nljfc": [{"name": "stdout", "output_type": "stream", "text": "2\n4\n8\n16\n32\n64\n128\n256\n"}], "jt2Qnm86UO": [], "Xbb6Qnk03M": [], "SPlvztm5Hv": [{"data": {"text/plain": "generator"}, "execution_count": 80, "metadata": {}, "output_type": "execute_result"}], "SKCUZvyryv": [{"name": "stdout", "output_type": "stream", "text": "4\n8\n"}], "XmHj4VMF90": [], "8KFtUzWf9j": [{"data": {"text/plain": "generator"}, "execution_count": 89, "metadata": {}, "output_type": "execute_result"}], "gyczhCiXih": [{"name": "stdout", "output_type": "stream", "text": "1\n9\n25\n"}], "ycpHwip11I": [], "igdDUJwEXM": [], "D0np8bYw7q": [], "o1g3HUFSgN": [{"name": "stdout", "output_type": "stream", "text": "dict_keys(['primo', 'secondo', 'terzo', 'quarto'])\n"}], "cgZ7mCnUKG": [], "2ppVnHYcRC": [{"name": "stdout", "output_type": "stream", "text": "{'x': <class 'int'>, 's': <class 'str'>, 'return': <class 'str'>}\n"}], "KWrMkrTg3K": [{"name": "stdout", "output_type": "stream", "text": "{'a': <class 'int'>}\n"}], "T22gmtGt5G": [], "k1CQXUGxPZ": [{"name": "stdout", "output_type": "stream", "text": "{'nome': <class 'str'>, 'cognome': <class 'str'>}\n"}], "f8M4SewpHf": [], "322BvyM0WT": [], "yViNxDQVxy": [], "POuEnbsZy7": [{"name": "stdout", "output_type": "stream", "text": "MiaClasse(nome='andrea', cognome='prestini')\n"}], "RxNxXBFiJg": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 1, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# Gli oggetti in python\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "H1G0eYgmow": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 1, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nTutto \u00e8 un oggetto in python. Questi oggetti hanno sempre 3 elementi:\\n* identit\u00e0\\n* tipologia\\n* valore\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "Ilj1nCuFTo": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 2, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\n## Identit\u00e0\\nInformazione numerica di tipo immutabile, rimane fino alla morte dell'oggetto.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "TbdsDwU3SN": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 3, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\n## Tipologia\\nCategoria che determina la natura di un oggetto; quali valori possono essere assegnati ad un oggetto, altre caratteristiche dell'oggetto. Gli oggetti che fanno parte di un certo tipo si chiamano ISTANZE di quell'oggetto.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "82U5DgluOw": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 4, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\n# Valore\\nIl valore \u00e8 un dato o un insieme di dati mantenuto all'interno dell'oggetto, quando questi lo prevede. Un oggetto che pu\u00f2 modificare il suo valore durante il suo ciclo di vita si dice Mutabile, diversamente si definisce Immutabile. Tale caratteristica \u00e8 data dal $\\\\color{green}{tipo}$ di oggetto.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "L8Hwfv3vuI": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 5, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Literal\\nForma $\\\\color{red}{letterale}$ di un oggetto: python possiede una serie di dati che sono predefiniti nel linguaggio e la cui definizione del valore dipende dal modo letterale con cui sono stati inseriti. Se scrivo 20 python lo interpreter\u00e0 come un integer perch\u00e8 questo \u00e8 il modo letterale con cui lo abbiamo inserito; tra apici invece definiremo un oggetto stringa, senza bisogno di dichiararlo!\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "AK0oQRjf9m": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 6, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# Variabili\\nPer riferirci agli oggetti non useremo mai la sua identit\u00e0, ma lo assegneremo un $\\\\color{red}{nome}$ ad un oggetto.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "8I59qcVdzR": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 7, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n~~~\\na = 20\\nmia_lista = [1, 2, 3]\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "V7tm5sZDgo": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 8, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nEsistono delle regole per definire i nomi validi:\\n* lettere o numeri o caratteri Unicode o underscore\\n* NON pu\u00f2 iniziare con un numero\\n* NON pu\u00f2 essere una **parola riservata**\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "UIZKuaJMbZ": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 9, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nI nomi associati agli oggetti vengono definiti *variabili*.\\nIn python una variabile non \u00e8 una variabile, ma un nome che punta ad una variabile. Non \u00e8 fortemente tipizzata.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "cpgB2k8CS4": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 10, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n~~~\\na = 20\\na = \"andrea\"\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "xGxmF8Lkeh": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 11, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nQuesta cosa implica la **condivisione** dell'ID.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "fWYw0WHCzP": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 12, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n~~~\\na = 20\\nb = a\\n~~~\\nIn questo caso a e b puntano allo stesso oggetto, ma non sono lo stesso oggetto!\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "fmsBSQzCeA": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 13, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nMolto importante \u00e8 il concetto di $\\\\color{red}{reference~count}$.\\nTutti gli oggetti in python hanno un contatore di riferimenti: questo implica che l'oggetto venga distrutto SOLO quando il suo reference count \u00e8 pari a 0. Il *Garbage Collector* ripulisce tutto e libera la memoria (tutto in runtime).\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "sDSflsmkHx": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 14, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n Il *Garbage Collector* ripulisce tutto e libera la memoria (tutto in runtime).\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "vUhjuDJPE4": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 15, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\n# Callable Objects\\nGli oggetti chiamabili sono quelli in cui usiamo argomenti all'interno delle parentesi tonde. Esempio le funzioni!\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "BX6DhqEkmn": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 16, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nLa funzione `print` ne \u00e8 un esempio!\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "q7M9oweVqQ": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 17, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nAltre funzioni utili sono `id(oggetto)` oppure `type(oggetto)`.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "FEmYTRhfZl": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 18, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# Gli Attributi\\nGli oggetti in python hanno un valore ed una identit\u00e0; possono avere anche una serie di *attributi*.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "kLTKQJzto9": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 19, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nGli attributi sono degli oggetti riferiti da un oggetto perch\u00e8 ne specificano ulteriori caratteristiche (possono essere dati o funzioni). Nel caso in cui siano funzioni vengono chiamati metodi.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "cjf1Hxgy4S": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 20, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nPer richiamarli si una il punto: nome oggetto.nome attributo!\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "WbmxqYhTex": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 21, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nQuando l'attributo \u00e8 una funzione dobbiamo invocarlo essendo un oggetto Callable.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "nsvnXHaXx0": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 24, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# BASIC data types\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "eYXoQRyClB": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 25, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n* tipi numerici (anche boolean)\\n* stringhe\\n* operatori\\n*espressioni\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "eeJHHaaLVw": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 26, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n>> None \u00e8 un basic data type che ha una sola istanza... None\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "EUy9CakW5V": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 27, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## tipi numerici\\n* integer\\n* floating poin\\n* boolean\\nSono tutti Immutabili!\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "znFfoUZQgT": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 28, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n`a = 3` ed `a = 4`\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "lSMEFh7Scr": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 29, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\na non ha modificato l'oggetto, ma punta ad un oggetto diverso, prima il numero 3 e poi il numero 4!\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "rVj483QpDi": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 30, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nDalla versione 3.6 possiamo dividere le cifre di un numero attraverso l'underscore: 10_000_000.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "Hm0nZDIHtN": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 31, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nPossiamo usare 3 literal per esprimere un numero:\\n* Binario -- 0b10011001\\n* ottale 0o1635\\n* esadecimale 0x1F8A\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "qbG62SubLm": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 32, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nI boolean sono sottoinsiemi di interi che hanno solo 2 valori: True o False; True=1 e False=0.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "YgJiB6uFF7": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 33, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nI Floating point vengono introdotti con un punto decimale di separazione. \\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "dwWoShkYZK": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 34, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nPossiamo usare anche l'annotazione esponenziale!\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "q4LOQsxgps": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 37, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nNaturalmente python supporta anche i numeri **immaginari**.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "zg4IAmdJXp": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 38, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Stringhe\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "dCweC8jwMr": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 39, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nLe STRINGHE sono sequenze di elementi: una sequenza indica un insieme *ordinato* di elementi. Tale caratteristica ci permetter\u00e0 di intervenire facilmente sugli elementi che compongono la stringa.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "C9NoPjG1IC": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 40, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nOgno elemento di una stringa deve appartenere al set UNICODE.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "hmvisbzL7U": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 41, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nLe stringhe in python sono oggetti immutabili, possiamo copiare parte di una stringa in un'altra stringa.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "uT2pkMyMPs": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 42, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nPossiamo usare apici singoli o doppi, purch\u00e8 siano simmetricamente definiti.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "srIFrgmU2w": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 43, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nUna stringa vuota non ha caratteri ma \u00e8 comunque esistente come oggetto.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "YSYGi8sVaa": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 44, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nPossiamo definire stringhe su multilinea usando 3 apici singoli o 3 apici doppi. \\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "vRXZUL4x9Z": [{"output_type": "stream", "name": "stdout", "text": "\u001b[0;36m  Input \u001b[0;32mIn [45]\u001b[0;36m\u001b[0m\n\u001b[0;31m    \"\"\" questa pu\u00f2 essere una stringa su\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n\n"}], "Czze82V0nl": [], "SDL0vZ4Z3v": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 47, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## caso particolare: le F strings\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "HlJd1JAGn3": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 48, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n* modulo formatting (ormai deprecata)\\n* metodo format associato alle stringhe\\n* f-string introdotto da python 3\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "lSkwQRmOMF": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 51, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nQuesta operazione viene detta **String Interpolation**\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "3Jx8Yhsckj": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 53, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nPEP 498 -- Literal String Interpolation\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "1zvE0D7vyF": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 54, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# Espressioni ed Operatori\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "IsvCB2887k": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 55, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nLe operazioni eseguono operazioni su degli elementi; tali elementi possono essere di tipo diverso.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "RDvSJilRZx": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 56, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nI pi\u00f9 comuni sono gli operatori aritmetici:\\n* addizione + \\n* sottrazione -\\n* moltiplicazione \\\\*\\n* divisione floating point /\\n* divisione intera // solo parte intera del risultato\\n* modulo % definisce il resto di una divisione\\n* esponenziale **\\n* meno unario -\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "3EUGqSylam": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 57, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\noperatori di assegnamento:\\n* = assegnazione di variabile\\n* += scorciatoia per a += equivale ad a= a+b\\n* -=, *=, /=, //=, %=, **=\\n\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "1BjjNALW6j": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 58, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\noperatori di confronto (ritornano sempre un valore Booleano):\\n* <\\n* \\\\>\\n* ==\\n* !=\\n* <=\\n* \\\\>=\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "TAplUJrwvD": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 59, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nAttenzione alla $\\\\color{red}{precedenza}$: usiamo le parentesi per modificarne il comportamento.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "mnWjEwTD0v": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 60, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nOperatori logici (restituisco valori Booleani):\\n* and\\n* or\\n* notm\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "8683uFYApV": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 61, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n|  A    | B    | A AND B|\\n|:--------|:----:|-------:|\\n|True| True| True|\\n|False| False|False|\\n|True| False|False|\\n|False| False|False|\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "48tVe28ePv": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 62, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n|  A    | B    | A OR B|\\n|:--------|:----:|-------:|\\n|True| True| True|\\n|False| False|False|\\n|True| False|True|\\n|False| False|True|\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "ikyXn2E8XJ": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 63, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nNOT \u00e8 un operatore UNARIO: ritorna il contrario dell'espressione valutata.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "qV4i5xfHOc": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 64, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nIn python *tutti* gli oggetti hanno un valore di verit\u00e0 implicitamente assegnato:\\nsono tutti FALSE\\n* None\\n* False\\n* Zero\\n* una sequenza vuota\\n* un dizionario vuoto\\nin tutti gli altri casi il valore \u00e8 TRUE...\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "Ca1pw2xrrk": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 65, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nOperatori su *Sequenze*\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "SgiXWfqjks": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 73, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n~~~\\n[start:stop:step]\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "1KuZMsVayK": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 74, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nConcatenazione utilizzando l'operatore $\\\\huge{+}$\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "X59r76wm0u": [], "Hi8IX6QUgN": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 80, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# Conversioni di tipo\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "Xswdz9x8YP": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 81, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nInteri:\\n* usiamo la funzione int()\\n* le stringhe diventano numeri interi (se sono numeri)\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "JYQGatvoLl": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 82, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nFloat:\\n* usiamo la funzione float()\\n* stesso discorso per gli interi\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "1R6XfHWE7K": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 83, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nStringa:\\n* usiamo la funzione str()\\n* usata per i numeri che diventano elementi di stringa\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "SZcMK3LudI": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 84, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nBooleano:\\n* usiamo la funzione bool()\\n* lo applichiamo a tutti gli elementi\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "lsnv5TL1il": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 85, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# Strutture di dati in python\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "wduPyZ3R2y": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 86, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# Liste, Tuple, Dizionari, Set\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "ItZS1cp3er": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 87, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nUna sequenza \u00e8 generalmente definita come un insieme ordinato di elementi indicizzati numericamente attraverso la loro posizione; l'indice parte sempre da $\\\\huge{0}$\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "wEOoGSAFbH": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 88, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nListe e Tuple caratteristiche:\\n* elementi di tipo qualunche\\n* le liste sono mutabili\\n* le tuple sono immutabili\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "mufKNttTuv": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 89, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Liste\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "HfWgWzjB6i": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 90, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nSequenza di elementi qualunque, mutabili. L'instaza riguarda una classe predefinita che si chiama list.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "0cHwjdwsj4": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 93, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nValgono per lo slicing tutti i discorsi visti per le stringhe!\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "PrmRe11Ifq": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 96, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nmodifichiamo la lista:\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "wcErPhhXkP": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 111, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Due nomi, una lista\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "7wq7oHZkEL": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 115, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nPuntando alla stessa lista la variazione di una determina la variazione dell'altra... se questo non fosse il comportamento che vogliamo ritorna utile l'attributo COPY...\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "mbcl1dky3V": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 120, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Tuple\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "9TZrphVRLw": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 121, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nLa tupla \u00e8 una sequenza $\\\\huge{immutabile}$\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "IryEMbCxBW": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 122, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nIl tipo \u00e8 la classe tuple()\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "bgqpA4QugN": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 126, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nil Tuple $\\\\huge{UNpacking}$\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "pnDsXoe8BI": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 131, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Dizionario\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "rj6Sctvrqf": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 132, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nNei dizionari l'ordine degli elementi non \u00e8 definito, si usano delle chiavi univoche che vengono associate ai rispettivi valori.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "keG4Jfoe26": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 133, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nLe chiavi devono essere univoche. Gli elementi dei dizionari sono mutabili attraverso i metodi appartenenti ai dizionari.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "bdmMj0THDZ": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 134, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nLa classe dei dizionari \u00e8 la dict().\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "qLl6Vnui4A": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 141, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n~~~\\nmyDict.clear() # vuota il dizionario\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "j1cSWkkQxy": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 154, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## SET\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "AOgOQ51N08": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 155, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nSi tratta di insiemi, con tutte le operazioni matematiche che abbiamo per gli insiemi...\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "u2WH3r0DUL": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 158, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nUn set \u00e8 un oggetto **mutabile**:\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "GU03ygHkDb": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 160, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nEsiste anche la possibilit\u00e0 di usare dei Frozen SET...immutabili\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "SnLqpdwbHs": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 164, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nOperazioni peculiari sugli insiemi: intersezione ed unione.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "iV1fhPMD79": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 171, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n# Strutture di codice\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "aimK4pLUPt": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 172, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## linee di codice e blocchi di codice\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "8nE91NUTZE": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 173, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nAbbiamo:\\n* linee logiche di codice (che vede python)\\n* linee fisiche (che scriviamo nel listato)\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "lehU0TXAus": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 175, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nUn blocco di codice \u00e8 un insieme di linee di codice raggruppate!\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "6RlUs1W6i9": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 176, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n```\\ninp = input(\"inserisci un numero: \")\\nx = int(inp)\\nif x < 10:\\n    s = \"numero minore di 10\"\\n    print(s)\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "VRhrBynozb": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 177, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Statement: istruzioni del programma\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "dA0fNWIU5w": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 178, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nOperazioni che si richiede al codice python di eseguire:\\n\\n```s = \"andrea\"```\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "m1ZI621TrP": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 179, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nStatement semplici e composti\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "9uj4MHZHPt": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 180, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n```\\nif x < 10:\\n    s = \"numero minore di 10\"\\n    elif x == 10:\\n        s = \"numero 10\"\\n    else:\\n        s = \"numero maggiore di 10\\n        print(s)\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "uI1o5Y8AEc": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 181, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nStruttura di uno statement composto:\\n* contiene una o pi\u00f9 clausole\\n* ogni clausola contiene una parola chiave di python detta HEADER e termina con il carattere :\\n* suite che contiene un blocco di codice, indentato rispetto all'HEADER\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "cKpBHKwLN9": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 182, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Lo statement IF\\nViene utilizzato per definire una esecuzione condizionata del codice (azioni differenti rispetto al test di verit\u00e0). \\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "aOVdMtKuln": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 183, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nLa clausola ELSE viene eseguita solo se tutte le precedenti danno come risultato FALSE; possiamo ometterla per fare in modo che nel caso di tutti FALSE non venga eseguito nulla!\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "dljhV6bXVp": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 185, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n## Lo statement WHILE\\nLa else \u00e8 facoltativa ma poco utilizzata\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "UBmFIZoDEP": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 186, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nSe \u00e8 presente la clausola ELSE si entra nel ciclo sempre: se l'espressione risulter\u00e0 FALSE ci entreremo direttamente senza passare dal True.\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}], "Vuyyo7KNr1": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 187, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\n```\\nx = 0\\nwhile x < 3:\\n    print(x)\\n    x += 1\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "tmHCbFw6rx": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 188, "data": {"text/plain": "'\u00b0\u00b0\u00b0\\nSpesso si vuole eseguire un loop senza sapere quando la condizione sar\u00e0 verificata; in questo caso utilizzeremo $\\\\color{green}{break}$ per uscire dal loop.\\n\u00b0\u00b0\u00b0'"}, "metadata": {}}], "XwCfZT7Ivz": [{"output_type": "stream", "name": "stdout", "text": "\n"}, {"output_type": "execute_result", "execution_count": 189, "data": {"text/plain": "\"\u00b0\u00b0\u00b0\\nDiverso \u00e8 lo statement $\\\\color{red}{continue}$ il quale non esce dal ciclo ma lo f\u00e0 ripartire dall'inizio!\\n\u00b0\u00b0\u00b0\""}, "metadata": {}}]}